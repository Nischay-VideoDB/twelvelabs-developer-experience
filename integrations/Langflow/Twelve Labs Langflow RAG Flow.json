{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TwelveLabsVideoEmbeddings",
            "id": "TwelveLabsVideoEmbeddings-IZIXn",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding_model",
            "id": "AstraDB-Kb5EQ",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-TwelveLabsVideoEmbeddings-IZIXn{œdataTypeœ:œTwelveLabsVideoEmbeddingsœ,œidœ:œTwelveLabsVideoEmbeddings-IZIXnœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-Kb5EQ{œfieldNameœ:œembedding_modelœ,œidœ:œAstraDB-Kb5EQœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TwelveLabsVideoEmbeddings-IZIXn",
        "sourceHandle": "{œdataTypeœ:œTwelveLabsVideoEmbeddingsœ,œidœ:œTwelveLabsVideoEmbeddings-IZIXnœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "AstraDB-Kb5EQ",
        "targetHandle": "{œfieldNameœ:œembedding_modelœ,œidœ:œAstraDB-Kb5EQœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TwelveLabsPegasusIndexVideo",
            "id": "TwelveLabsPegasusIndexVideo-uWtUi",
            "name": "indexed_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "ingest_data",
            "id": "AstraDB-Kb5EQ",
            "inputTypes": [
              "Data",
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-TwelveLabsPegasusIndexVideo-uWtUi{œdataTypeœ:œTwelveLabsPegasusIndexVideoœ,œidœ:œTwelveLabsPegasusIndexVideo-uWtUiœ,œnameœ:œindexed_dataœ,œoutput_typesœ:[œDataœ]}-AstraDB-Kb5EQ{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-Kb5EQœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TwelveLabsPegasusIndexVideo-uWtUi",
        "sourceHandle": "{œdataTypeœ:œTwelveLabsPegasusIndexVideoœ,œidœ:œTwelveLabsPegasusIndexVideo-uWtUiœ,œnameœ:œindexed_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "AstraDB-Kb5EQ",
        "targetHandle": "{œfieldNameœ:œingest_dataœ,œidœ:œAstraDB-Kb5EQœ,œinputTypesœ:[œDataœ,œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TwelveLabsTextEmbeddings",
            "id": "TwelveLabsTextEmbeddings-bpxJ4",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding_model",
            "id": "AstraDB-m6bmc",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-TwelveLabsTextEmbeddings-bpxJ4{œdataTypeœ:œTwelveLabsTextEmbeddingsœ,œidœ:œTwelveLabsTextEmbeddings-bpxJ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-AstraDB-m6bmc{œfieldNameœ:œembedding_modelœ,œidœ:œAstraDB-m6bmcœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TwelveLabsTextEmbeddings-bpxJ4",
        "sourceHandle": "{œdataTypeœ:œTwelveLabsTextEmbeddingsœ,œidœ:œTwelveLabsTextEmbeddings-bpxJ4œ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "AstraDB-m6bmc",
        "targetHandle": "{œfieldNameœ:œembedding_modelœ,œidœ:œAstraDB-m6bmcœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "AstraDB",
            "id": "AstraDB-m6bmc",
            "name": "search_results",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "astra_results",
            "id": "ConvertAstraToTwelveLabs-mRZuv",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-AstraDB-m6bmc{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-m6bmcœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ConvertAstraToTwelveLabs-mRZuv{œfieldNameœ:œastra_resultsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "AstraDB-m6bmc",
        "sourceHandle": "{œdataTypeœ:œAstraDBœ,œidœ:œAstraDB-m6bmcœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}",
        "target": "ConvertAstraToTwelveLabs-mRZuv",
        "targetHandle": "{œfieldNameœ:œastra_resultsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "VideoFile",
            "id": "VideoFile-bcaWO",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "videodata",
            "id": "SplitVideo-iGu6B",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-VideoFile-bcaWO{œdataTypeœ:œVideoFileœ,œidœ:œVideoFile-bcaWOœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitVideo-iGu6B{œfieldNameœ:œvideodataœ,œidœ:œSplitVideo-iGu6Bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "VideoFile-bcaWO",
        "sourceHandle": "{œdataTypeœ:œVideoFileœ,œidœ:œVideoFile-bcaWOœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitVideo-iGu6B",
        "targetHandle": "{œfieldNameœ:œvideodataœ,œidœ:œSplitVideo-iGu6Bœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SplitVideo",
            "id": "SplitVideo-iGu6B",
            "name": "clips",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "videodata",
            "id": "TwelveLabsPegasusIndexVideo-uWtUi",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-SplitVideo-iGu6B{œdataTypeœ:œSplitVideoœ,œidœ:œSplitVideo-iGu6Bœ,œnameœ:œclipsœ,œoutput_typesœ:[œDataœ]}-TwelveLabsPegasusIndexVideo-uWtUi{œfieldNameœ:œvideodataœ,œidœ:œTwelveLabsPegasusIndexVideo-uWtUiœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SplitVideo-iGu6B",
        "sourceHandle": "{œdataTypeœ:œSplitVideoœ,œidœ:œSplitVideo-iGu6Bœ,œnameœ:œclipsœ,œoutput_typesœ:[œDataœ]}",
        "target": "TwelveLabsPegasusIndexVideo-uWtUi",
        "targetHandle": "{œfieldNameœ:œvideodataœ,œidœ:œTwelveLabsPegasusIndexVideo-uWtUiœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConvertAstraToTwelveLabs",
            "id": "ConvertAstraToTwelveLabs-mRZuv",
            "name": "index_id",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "index_id",
            "id": "TwelveLabsPegasus-tMPRE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ConvertAstraToTwelveLabs-mRZuv{œdataTypeœ:œConvertAstraToTwelveLabsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œnameœ:œindex_idœ,œoutput_typesœ:[œMessageœ]}-TwelveLabsPegasus-tMPRE{œfieldNameœ:œindex_idœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConvertAstraToTwelveLabs-mRZuv",
        "sourceHandle": "{œdataTypeœ:œConvertAstraToTwelveLabsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œnameœ:œindex_idœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TwelveLabsPegasus-tMPRE",
        "targetHandle": "{œfieldNameœ:œindex_idœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ConvertAstraToTwelveLabs",
            "id": "ConvertAstraToTwelveLabs-mRZuv",
            "name": "video_id",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "video_id",
            "id": "TwelveLabsPegasus-tMPRE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ConvertAstraToTwelveLabs-mRZuv{œdataTypeœ:œConvertAstraToTwelveLabsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œnameœ:œvideo_idœ,œoutput_typesœ:[œMessageœ]}-TwelveLabsPegasus-tMPRE{œfieldNameœ:œvideo_idœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ConvertAstraToTwelveLabs-mRZuv",
        "sourceHandle": "{œdataTypeœ:œConvertAstraToTwelveLabsœ,œidœ:œConvertAstraToTwelveLabs-mRZuvœ,œnameœ:œvideo_idœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TwelveLabsPegasus-tMPRE",
        "targetHandle": "{œfieldNameœ:œvideo_idœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TwelveLabsPegasus",
            "id": "TwelveLabsPegasus-tMPRE",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Imlbk",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-TwelveLabsPegasus-tMPRE{œdataTypeœ:œTwelveLabsPegasusœ,œidœ:œTwelveLabsPegasus-tMPREœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-Imlbk{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Imlbkœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TwelveLabsPegasus-tMPRE",
        "sourceHandle": "{œdataTypeœ:œTwelveLabsPegasusœ,œidœ:œTwelveLabsPegasus-tMPREœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-Imlbk",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Imlbkœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-qUFNR",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "search_query",
            "id": "AstraDB-m6bmc",
            "inputTypes": [
              "Message"
            ],
            "type": "query"
          }
        },
        "id": "xy-edge__ChatInput-qUFNR{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qUFNRœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-AstraDB-m6bmc{œfieldNameœ:œsearch_queryœ,œidœ:œAstraDB-m6bmcœ,œinputTypesœ:[œMessageœ],œtypeœ:œqueryœ}",
        "selected": false,
        "source": "ChatInput-qUFNR",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qUFNRœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "AstraDB-m6bmc",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œAstraDB-m6bmcœ,œinputTypesœ:[œMessageœ],œtypeœ:œqueryœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-qUFNR",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "TwelveLabsPegasus-tMPRE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-qUFNR{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qUFNRœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-TwelveLabsPegasus-tMPRE{œfieldNameœ:œmessageœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-qUFNR",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-qUFNRœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TwelveLabsPegasus-tMPRE",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œTwelveLabsPegasus-tMPREœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "VideoFile",
            "id": "VideoFile-SEa6V",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "videodata",
            "id": "SplitVideo-kVqgo",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__VideoFile-SEa6V{œdataTypeœ:œVideoFileœ,œidœ:œVideoFile-SEa6Vœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SplitVideo-kVqgo{œfieldNameœ:œvideodataœ,œidœ:œSplitVideo-kVqgoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "VideoFile-SEa6V",
        "sourceHandle": "{œdataTypeœ:œVideoFileœ,œidœ:œVideoFile-SEa6Vœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SplitVideo-kVqgo",
        "targetHandle": "{œfieldNameœ:œvideodataœ,œidœ:œSplitVideo-kVqgoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SplitVideo",
            "id": "SplitVideo-kVqgo",
            "name": "clips",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "videodata",
            "id": "TwelveLabsPegasusIndexVideo-o0skq",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__SplitVideo-kVqgo{œdataTypeœ:œSplitVideoœ,œidœ:œSplitVideo-kVqgoœ,œnameœ:œclipsœ,œoutput_typesœ:[œDataœ]}-TwelveLabsPegasusIndexVideo-o0skq{œfieldNameœ:œvideodataœ,œidœ:œTwelveLabsPegasusIndexVideo-o0skqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SplitVideo-kVqgo",
        "sourceHandle": "{œdataTypeœ:œSplitVideoœ,œidœ:œSplitVideo-kVqgoœ,œnameœ:œclipsœ,œoutput_typesœ:[œDataœ]}",
        "target": "TwelveLabsPegasusIndexVideo-o0skq",
        "targetHandle": "{œfieldNameœ:œvideodataœ,œidœ:œTwelveLabsPegasusIndexVideo-o0skqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "SplitVideo-iGu6B",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split a video into multiple clips of specified duration.",
            "display_name": "Split Video",
            "documentation": "",
            "edited": false,
            "field_order": [
              "videodata",
              "clip_duration",
              "last_clip_handling",
              "include_original"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Video Clips",
                "hidden": false,
                "method": "process",
                "name": "clips",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "clip_duration": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Clip Duration (seconds)",
                "dynamic": false,
                "info": "Duration of each clip in seconds",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "clip_duration",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 6
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import BoolInput, IntInput, HandleInput, DropdownInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\nimport os\nimport subprocess\nfrom typing import List\nfrom datetime import datetime\nimport hashlib\nimport math\n\nclass SplitVideoComponent(Component):\n    \"\"\"A component that splits a video into multiple clips of specified duration using FFmpeg.\"\"\"\n\n    display_name = \"Split Video\"\n    description = \"Split a video into multiple clips of specified duration.\"\n    icon = \"TwelveLabs\"\n    name = \"SplitVideo\"\n\n    inputs = [\n        HandleInput(\n            name=\"videodata\",\n            display_name=\"Video Data\",\n            info=\"Input video data from VideoFile component\",\n            required=True,\n            input_types=[\"Data\"],\n        ),\n        IntInput(\n            name=\"clip_duration\",\n            display_name=\"Clip Duration (seconds)\",\n            info=\"Duration of each clip in seconds\",\n            required=True,\n            value=30,\n        ),\n        DropdownInput(\n            name=\"last_clip_handling\",\n            display_name=\"Last Clip Handling\",\n            info=(\n                \"How to handle the final clip when it would be shorter than the specified duration:\\n\"\n                \"- Truncate: Skip the final clip entirely if it's shorter than the specified duration\\n\"\n                \"- Overlap Previous: Start the final clip earlier to maintain full duration, overlapping with previous clip\\n\"\n                \"- Keep Short: Keep the final clip at its natural length, even if shorter than specified duration\"\n            ),\n            options=[\"Truncate\", \"Overlap Previous\", \"Keep Short\"],\n            value=\"Overlap Previous\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"include_original\",\n            display_name=\"Include Original Video\",\n            info=\"Whether to include the original video in the output\",\n            value=False,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"clips\",\n            display_name=\"Video Clips\",\n            method=\"process\",\n            output_types=[\"Data\"],\n        ),\n    ]\n\n    def get_video_duration(self, video_path: str) -> float:\n        \"\"\"Get video duration using FFmpeg.\"\"\"\n        try:\n            cmd = [\n                'ffprobe',\n                '-v', 'error',\n                '-show_entries', 'format=duration',\n                '-of', 'default=noprint_wrappers=1:nokey=1',\n                video_path\n            ]\n            result = subprocess.run(cmd, capture_output=True, text=True)\n            if result.returncode != 0:\n                raise RuntimeError(f\"FFprobe error: {result.stderr}\")\n            return float(result.stdout.strip())\n        except Exception as e:\n            self.log(f\"Error getting video duration: {str(e)}\", \"ERROR\")\n            raise\n\n    def get_output_dir(self, video_path: str) -> str:\n        \"\"\"Create a unique output directory for clips based on video name and timestamp.\"\"\"\n        # Get the video filename without extension\n        base_name = os.path.splitext(os.path.basename(video_path))[0]\n        \n        # Create a timestamp\n        timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        \n        # Create a unique hash from the video path\n        path_hash = hashlib.md5(video_path.encode()).hexdigest()[:8]\n        \n        # Create the output directory path\n        output_dir = os.path.join(\n            os.path.dirname(video_path),\n            f\"clips_{base_name}_{timestamp}_{path_hash}\"\n        )\n        \n        # Create the directory if it doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n        \n        return output_dir\n\n    def process_video(self, video_path: str, clip_duration: int, include_original: bool) -> List[Data]:\n        \"\"\"Process video and split it into clips using FFmpeg.\"\"\"\n        try:\n            # Get video duration\n            total_duration = self.get_video_duration(video_path)\n            \n            # Calculate number of clips (ceiling to include partial clip)\n            num_clips = math.ceil(total_duration / clip_duration)\n            self.log(f\"Total duration: {total_duration}s, Clip duration: {clip_duration}s, Number of clips: {num_clips}\")\n            \n            # Create output directory for clips\n            output_dir = self.get_output_dir(video_path)\n            \n            # Get original video info\n            original_filename = os.path.basename(video_path)\n            original_name = os.path.splitext(original_filename)[0]\n            \n            # List to store all video paths (including original if requested)\n            video_paths = []\n            \n            # Add original video if requested\n            if include_original:\n                original_data = {\n                    \"text\": video_path,\n                    \"metadata\": {\n                        \"source\": video_path,\n                        \"type\": \"video\",\n                        \"clip_index\": -1,  # -1 indicates original video\n                        \"duration\": total_duration,\n                        \"original_video\": {\n                            \"name\": original_name,\n                            \"filename\": original_filename,\n                            \"path\": video_path,\n                            \"duration\": total_duration,\n                            \"total_clips\": num_clips,\n                            \"clip_duration\": clip_duration\n                        }\n                    }\n                }\n                video_paths.append(Data(data=original_data))\n            \n            # Split video into clips\n            for i in range(num_clips):\n                start_time = i * clip_duration\n                end_time = min((i + 1) * clip_duration, total_duration)\n                duration = end_time - start_time\n                \n                # Handle last clip if it's shorter\n                if i == num_clips - 1 and duration < clip_duration:\n                    if self.last_clip_handling == \"Truncate\":\n                        # Skip if the last clip would be too short\n                        continue\n                    elif self.last_clip_handling == \"Overlap Previous\" and i > 0:\n                        # Start from earlier to make full duration\n                        start_time = total_duration - clip_duration\n                        duration = clip_duration\n                    # For \"Keep Short\", we use the original start_time and duration\n                \n                # Skip if duration is too small (less than 1 second)\n                if duration < 1:\n                    continue\n                \n                # Generate output path\n                output_path = os.path.join(output_dir, f\"clip_{i:03d}.mp4\")\n                \n                try:\n                    # Use FFmpeg to split the video\n                    cmd = [\n                        'ffmpeg',\n                        '-i', video_path,\n                        '-ss', str(start_time),\n                        '-t', str(duration),\n                        '-c:v', 'libx264',\n                        '-c:a', 'aac',\n                        '-y',  # Overwrite output file if it exists\n                        output_path\n                    ]\n                    \n                    result = subprocess.run(cmd, capture_output=True, text=True)\n                    if result.returncode != 0:\n                        raise RuntimeError(f\"FFmpeg error: {result.stderr}\")\n                    \n                    # Create Data object for the clip\n                    clip_data = {\n                        \"text\": output_path,\n                        \"metadata\": {\n                            \"source\": video_path,\n                            \"type\": \"video\",\n                            \"clip_index\": i,\n                            \"start_time\": start_time,\n                            \"end_time\": end_time,\n                            \"duration\": duration,\n                            \"original_video\": {\n                                \"name\": original_name,\n                                \"filename\": original_filename,\n                                \"path\": video_path,\n                                \"duration\": total_duration,\n                                \"total_clips\": num_clips,\n                                \"clip_duration\": clip_duration\n                            },\n                            \"clip\": {\n                                \"index\": i,\n                                \"total\": num_clips,\n                                \"duration\": duration,\n                                \"start_time\": start_time,\n                                \"end_time\": end_time,\n                                \"timestamp\": f\"{int(start_time//60):02d}:{int(start_time%60):02d} - {int(end_time//60):02d}:{int(end_time%60):02d}\"\n                            }\n                        }\n                    }\n                    video_paths.append(Data(data=clip_data))\n                    \n                except Exception as e:\n                    self.log(f\"Error processing clip {i}: {str(e)}\", \"ERROR\")\n                    raise\n            \n            self.log(f\"Created {len(video_paths)} clips in {output_dir}\")\n            return video_paths\n            \n        except Exception as e:\n            self.log(f\"Error processing video: {str(e)}\", \"ERROR\")\n            raise\n\n    def process(self) -> List[Data]:\n        \"\"\"Process the input video and return a list of Data objects containing the clips.\"\"\"\n        try:\n            # Get the input video path from the previous component\n            if not hasattr(self, 'videodata') or not isinstance(self.videodata, list) or len(self.videodata) != 1:\n                raise ValueError(\"Please provide exactly one video\")\n            \n            video_path = self.videodata[0].data.get('text')\n            if not video_path or not os.path.exists(video_path):\n                raise ValueError(\"Invalid video path\")\n            \n            # Process the video\n            return self.process_video(video_path, self.clip_duration, self.include_original)\n            \n        except Exception as e:\n            self.log(f\"Error in split video component: {str(e)}\", \"ERROR\")\n            raise\n"
              },
              "include_original": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Include Original Video",
                "dynamic": false,
                "info": "Whether to include the original video in the output",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "include_original",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "last_clip_handling": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Last Clip Handling",
                "dynamic": false,
                "info": "How to handle the final clip when it would be shorter than the specified duration:\n- Truncate: Skip the final clip entirely if it's shorter than the specified duration\n- Overlap Previous: Start the final clip earlier to maintain full duration, overlapping with previous clip\n- Keep Short: Keep the final clip at its natural length, even if shorter than specified duration",
                "name": "last_clip_handling",
                "options": [
                  "Truncate",
                  "Overlap Previous",
                  "Keep Short"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Overlap Previous"
              },
              "videodata": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Video Data",
                "dynamic": false,
                "info": "Input video data from VideoFile component",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "videodata",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SplitVideo"
        },
        "dragging": false,
        "id": "SplitVideo-iGu6B",
        "measured": {
          "height": 417,
          "width": 320
        },
        "position": {
          "x": -199.23985793082238,
          "y": -232.1033656713108
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Load a video file in common video formats.",
          "display_name": "Video File",
          "id": "VideoFile-bcaWO",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load a video file in common video formats.",
            "display_name": "Video File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "file_path"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "load_files",
                "name": "data",
                "options": null,
                "required_inputs": [
                  "file_path"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": null,
                "method": "load_dataframe",
                "name": "dataframe",
                "options": null,
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": null,
                "method": "load_message",
                "name": "message",
                "options": null,
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.io import FileInput\nfrom langflow.schema import Data\nimport os\n\n\nclass VideoFileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of video files.\n\n    This component supports processing video files in common video formats.\n    \"\"\"\n\n    display_name = \"Video File\"\n    description = \"Load a video file in common video formats.\"\n    icon = \"TwelveLabs\"\n    name = \"VideoFile\"\n\n    VALID_EXTENSIONS = [\n        # Common video formats\n        \"mp4\", \"avi\", \"mov\", \"mkv\", \"webm\", \"flv\", \"wmv\", \n        \"mpg\", \"mpeg\", \"m4v\", \"3gp\", \"3g2\", \"m2v\",\n        # Professional video formats\n        \"mxf\", \"dv\", \"vob\",\n        # Additional video formats\n        \"ogv\", \"rm\", \"rmvb\", \"amv\", \"divx\", \"m2ts\", \"mts\", \"ts\",\n        \"qt\", \"yuv\", \"y4m\"\n    ]\n\n    inputs = [\n        FileInput(\n            display_name=\"Video File\",\n            name=\"file_path\",\n            file_types=[\n                # Common video formats\n                \"mp4\", \"avi\", \"mov\", \"mkv\", \"webm\", \"flv\", \"wmv\", \n                \"mpg\", \"mpeg\", \"m4v\", \"3gp\", \"3g2\", \"m2v\",\n                # Professional video formats\n                \"mxf\", \"dv\", \"vob\",\n                # Additional video formats\n                \"ogv\", \"rm\", \"rmvb\", \"amv\", \"divx\", \"m2ts\", \"mts\", \"ts\",\n                \"qt\", \"yuv\", \"y4m\"\n            ],\n            required=True,\n            info=\"Upload a video file in any common video format supported by ffmpeg\",\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Process video files\"\"\"\n        self.log(f\"DEBUG: Processing video files: {len(file_list)}\")\n        \n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        processed_files = []\n        for file in file_list:\n            try:\n                file_path = str(file.path)\n                self.log(f\"DEBUG: Processing video file: {file_path}\")\n                \n                # Verify file exists\n                if not os.path.exists(file_path):\n                    raise FileNotFoundError(f\"Video file not found: {file_path}\")\n                \n                # Verify extension\n                if not file_path.lower().endswith(tuple(self.VALID_EXTENSIONS)):\n                    raise ValueError(f\"Invalid file type. Expected: {', '.join(self.VALID_EXTENSIONS)}\")\n                \n                # Create a dictionary instead of a Document\n                doc_data = {\n                    \"text\": file_path,\n                    \"metadata\": {\n                        \"source\": file_path,\n                        \"type\": \"video\"\n                    }\n                }\n                \n                # Pass the dictionary to Data\n                file.data = Data(data=doc_data)\n                \n                self.log(f\"DEBUG: Created data: {doc_data}\")\n                processed_files.append(file)\n                \n            except Exception as e:\n                self.log(f\"Error processing video file: {str(e)}\", \"ERROR\")\n                raise\n        \n        return processed_files\n\n    def load_files(self) -> list[Data]:\n        \"\"\"Load video files and return a list of Data objects\"\"\"\n        try:\n            self.log(\"DEBUG: Starting video file load\")\n            if not hasattr(self, 'file_path') or not self.file_path:\n                self.log(\"DEBUG: No video file path provided\")\n                return []\n\n            self.log(f\"DEBUG: Loading video from path: {self.file_path}\")\n            \n            # Verify file exists\n            if not os.path.exists(self.file_path):\n                self.log(f\"DEBUG: Video file not found at path: {self.file_path}\")\n                return []\n            \n            # Verify file size\n            file_size = os.path.getsize(self.file_path)\n            self.log(f\"DEBUG: Video file size: {file_size} bytes\")\n            \n            # Create a proper Data object with the video path\n            video_data = {\n                \"text\": self.file_path,\n                \"metadata\": {\n                    \"source\": self.file_path,\n                    \"type\": \"video\",\n                    \"size\": file_size\n                }\n            }\n            \n            self.log(f\"DEBUG: Created video data: {video_data}\")\n            result = [Data(data=video_data)]\n            \n            # Log the result to verify it's a proper Data object\n            self.log(f\"DEBUG: Returning list with Data objects\")\n            return result\n            \n        except Exception as e:\n            self.log(f\"DEBUG: Error in video load_files: {str(e)}\", \"ERROR\")\n            import traceback\n            self.log(f\"DEBUG: Traceback: {traceback.format_exc()}\", \"ERROR\")\n            return []  # Return empty list on error\n"
              },
              "file_path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Video File",
                "dynamic": false,
                "fileTypes": [
                  "mp4",
                  "avi",
                  "mov",
                  "mkv",
                  "webm",
                  "flv",
                  "wmv",
                  "mpg",
                  "mpeg",
                  "m4v",
                  "3gp",
                  "3g2",
                  "m2v",
                  "mxf",
                  "dv",
                  "vob",
                  "ogv",
                  "rm",
                  "rmvb",
                  "amv",
                  "divx",
                  "m2ts",
                  "mts",
                  "ts",
                  "qt",
                  "yuv",
                  "y4m"
                ],
                "file_path": "",
                "info": "Upload a video file in any common video format supported by ffmpeg",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_path",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "VideoFile"
        },
        "dragging": false,
        "id": "VideoFile-bcaWO",
        "measured": {
          "height": 335,
          "width": 320
        },
        "position": {
          "x": -594.8138128912035,
          "y": -202.2275094154838
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Generate embeddings from videos using Twelve Labs video embedding models.",
          "display_name": "Twelve Labs Video Embeddings",
          "id": "TwelveLabsVideoEmbeddings-IZIXn",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings from videos using Twelve Labs video embedding models.",
            "display_name": "Twelve Labs Video Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "api_key",
              "model_name",
              "request_timeout"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import SecretStrInput, IntInput, DropdownInput\nfrom twelvelabs import TwelveLabs\nimport time\nfrom typing import List\n\nclass TwelveLabsVideoEmbeddings(Embeddings):\n    def __init__(self, api_key: str, model_name: str = \"Marengo-retrieval-2.7\"):\n        self.client = TwelveLabs(api_key=api_key)\n        self.model_name = model_name\n        \n    def _wait_for_task_completion(self, task_id: str):\n        while True:\n            result = self.client.embed.task.retrieve(id=task_id)\n            if result.status == \"ready\":\n                return result\n            time.sleep(5)\n            \n    def embed_documents(self, texts: List[str]) -> List[List[float]]:\n        embeddings = []\n        for text in texts:\n            video_path = text.page_content if hasattr(text, 'page_content') else str(text)\n            result = self.embed_video(video_path)\n            \n            # First try to use video embedding, then fall back to clip embedding if available\n            if result['video_embedding']:\n                embeddings.append(result['video_embedding'])\n            elif result['clip_embeddings'] and len(result['clip_embeddings']) > 0:\n                embeddings.append(result['clip_embeddings'][0])\n            else:\n                # If neither is available, raise an error\n                raise ValueError(\"No embeddings were generated for the video\")\n        \n        return embeddings\n\n    def embed_query(self, text: str) -> List[float]:\n        video_path = text.page_content if hasattr(text, 'page_content') else str(text)\n        result = self.embed_video(video_path)\n        \n        # First try to use video embedding, then fall back to clip embedding if available\n        if result['video_embedding']:\n            return result['video_embedding']\n        elif result['clip_embeddings'] and len(result['clip_embeddings']) > 0:\n            return result['clip_embeddings']\n        else:\n            # If neither is available, raise an error\n            raise ValueError(\"No embeddings were generated for the video\")\n\n    def embed_video(self, video_path: str) -> dict:\n\n        with open(video_path, 'rb') as video_file:\n            task = self.client.embed.task.create(\n                model_name=self.model_name,\n                video_file=video_file,\n                video_embedding_scopes=[\"video\",\"clip\"],\n            )\n        \n        result = self._wait_for_task_completion(task.id)\n        \n        video_embedding = {'video_embedding': None, 'clip_embeddings': []}\n        \n        if hasattr(result.video_embedding, 'segments') and result.video_embedding.segments:\n            for seg in result.video_embedding.segments:\n                # Check for embeddings_float attribute (this is the correct attribute name)\n                if hasattr(seg, 'embeddings_float'):\n                    if seg.embedding_scope == \"video\":\n                        # Convert to list of floats\n                        video_embedding['video_embedding'] = [float(x) for x in seg.embeddings_float]\n        \n        return video_embedding\n\nclass TwelveLabsVideoEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"Twelve Labs Video Embeddings\"\n    description = \"Generate embeddings from videos using Twelve Labs video embedding models.\"\n    name = \"TwelveLabsVideoEmbeddings\"\n    icon = \"TwelveLabs\"\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\", \n            display_name=\"API Key\", \n            required=True\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\"Marengo-retrieval-2.7\"],\n            value=\"Marengo-retrieval-2.7\",\n        ),\n        IntInput(\n            name=\"request_timeout\",\n            display_name=\"Request Timeout\",\n            advanced=True\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return TwelveLabsVideoEmbeddings(\n            api_key=self.api_key,\n            model_name=self.model_name\n        )\n"
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "Marengo-retrieval-2.7"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Marengo-retrieval-2.7"
              },
              "request_timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TwelveLabsVideoEmbeddings"
        },
        "dragging": false,
        "id": "TwelveLabsVideoEmbeddings-IZIXn",
        "measured": {
          "height": 331,
          "width": 320
        },
        "position": {
          "x": 197.20540343678482,
          "y": -443.6109752843911
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-qUFNR",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-qUFNR",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -478.0906541007252,
          "y": 1552.1002996070754
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TwelveLabsTextEmbeddings-bpxJ4",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using Twelve Labs text embedding models.",
            "display_name": "Twelve Labs Text Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "api_key",
              "model",
              "max_retries",
              "request_timeout"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "hidden": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "options": null,
                "required_inputs": [
                  "api_key"
                ],
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Twelve Labs API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, FloatInput, IntInput, SecretStrInput\nfrom twelvelabs import TwelveLabs\n\n\nclass TwelveLabsTextEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"Twelve Labs Text Embeddings\"\n    description = \"Generate embeddings using Twelve Labs text embedding models.\"\n    icon = \"TwelveLabs\"\n    name = \"TwelveLabsTextEmbeddings\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Twelve Labs API Key\",\n            value=\"TWELVELABS_API_KEY\",\n            required=True\n        ),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\"Marengo-retrieval-2.7\"],\n            value=\"Marengo-retrieval-2.7\",\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            value=3,\n            advanced=True\n        ),\n        FloatInput(\n            name=\"request_timeout\",\n            display_name=\"Request Timeout\",\n            advanced=True\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        class TwelveLabsEmbeddings(Embeddings):\n            def __init__(self, api_key: str, model: str):\n                self.client = TwelveLabs(api_key=api_key)\n                self.model = model\n\n            def embed_documents(self, texts: list[str]) -> list[list[float]]:\n                all_embeddings = []\n                for text in texts:\n                    if not text:\n                        continue\n                        \n                    result = self.client.embed.create(\n                        model_name=self.model,\n                        text=text\n                    )\n\n                    if result.text_embedding and result.text_embedding.segments:\n                        for segment in result.text_embedding.segments:\n                            all_embeddings.append([float(x) for x in segment.embeddings_float])\n                            break  # Only take first segment for now\n                            \n                return all_embeddings\n\n            def embed_query(self, text: str) -> list[float]:\n                result = self.client.embed.create(\n                    model_name=self.model,\n                    text=text\n                )\n                \n                if result.text_embedding and result.text_embedding.segments:\n                    return [float(x) for x in result.text_embedding.segments[0].embeddings_float]\n                return []\n\n        return TwelveLabsEmbeddings(\n            api_key=self.api_key,\n            model=self.model\n        )\n"
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model",
                "options": [
                  "Marengo-retrieval-2.7"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Marengo-retrieval-2.7"
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TwelveLabsTextEmbeddings"
        },
        "dragging": false,
        "id": "TwelveLabsTextEmbeddings-bpxJ4",
        "measured": {
          "height": 331,
          "width": 320
        },
        "position": {
          "x": -534.6745814114302,
          "y": 843.0633333687999
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-Imlbk",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-Imlbk",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 1123.5431294322539,
          "y": 1236.5336905632025
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Converts AstraDB search results to inputs compatible with TwelveLabs Pegasus.",
          "display_name": "Convert AstraDB to Pegasus",
          "id": "ConvertAstraToTwelveLabs-mRZuv",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Converts AstraDB search results to inputs compatible with TwelveLabs Pegasus.",
            "display_name": "Convert AstraDB to Pegasus Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "astra_results"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Index ID",
                "hidden": false,
                "method": "get_index_id",
                "name": "index_id",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Video ID",
                "hidden": false,
                "method": "get_video_id",
                "name": "video_id",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "astra_results": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "AstraDB Results",
                "dynamic": false,
                "info": "Search results from AstraDB component",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "astra_results",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.schema import Data\nfrom langflow.io import HandleInput, Output\nfrom langflow.schema.message import Message\n\nclass ConvertAstraToTwelveLabs(Component):\n    \"\"\"Convert AstraDB search results to TwelveLabs Pegasus inputs.\"\"\"\n    \n    display_name = \"Convert AstraDB to Pegasus Input\"\n    description = \"Converts AstraDB search results to inputs compatible with TwelveLabs Pegasus.\"\n    icon = \"TwelveLabs\"\n    name = \"ConvertAstraToTwelveLabs\"\n    \n    inputs = [\n        HandleInput(\n            name=\"astra_results\",\n            display_name=\"AstraDB Results\",\n            input_types=[\"Data\"],\n            info=\"Search results from AstraDB component\",\n            required=True,\n            is_list=True\n        )\n    ]\n    \n    outputs = [\n        Output(\n            name=\"index_id\",\n            display_name=\"Index ID\",\n            type_=Message,\n            method=\"get_index_id\",\n        ),\n        Output(\n            name=\"video_id\",\n            display_name=\"Video ID\",\n            type_=Message,\n            method=\"get_video_id\",\n        )\n    ]\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._video_id = None\n        self._index_id = None\n        \n    def build(self) -> None:\n        \"\"\"Process the AstraDB results and extract TwelveLabs index information.\"\"\"\n        if not self.astra_results:\n            return\n            \n        # Convert to list if single item\n        results = self.astra_results if isinstance(self.astra_results, list) else [self.astra_results]\n        \n        # Try to extract index information from metadata\n        for doc in results:\n            if not isinstance(doc, Data):\n                continue\n                \n            # Get the metadata, handling the nested structure\n            metadata = {}\n            if hasattr(doc, \"metadata\"):\n                if isinstance(doc.metadata, dict):\n                    # Handle nested metadata\n                    if \"metadata\" in doc.metadata:\n                        metadata = doc.metadata[\"metadata\"]\n                    else:\n                        metadata = doc.metadata\n            \n            # Extract index_id and video_id\n            self._index_id = metadata.get(\"index_id\")\n            self._video_id = metadata.get(\"video_id\")\n            \n            # If we found both, we can stop searching\n            if self._index_id and self._video_id:\n                break\n\n    def get_video_id(self) -> Message:\n        \"\"\"Return the extracted video ID as a Message.\"\"\"\n        self.build()\n        return Message(text=self._video_id if self._video_id else \"\")\n        \n    def get_index_id(self) -> Message:\n        \"\"\"Return the extracted index ID as a Message.\"\"\"\n        self.build()\n        return Message(text=self._index_id if self._index_id else \"\")\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ConvertAstraToTwelveLabs"
        },
        "dragging": false,
        "id": "ConvertAstraToTwelveLabs-mRZuv",
        "measured": {
          "height": 259,
          "width": 320
        },
        "position": {
          "x": 258.87963891982207,
          "y": 858.0301613980282
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "AstraDB-Kb5EQ",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "VectorStore"
            ],
            "beta": false,
            "category": "vectorstores",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Ingest and search documents in Astra DB",
            "display_name": "Astra DB",
            "documentation": "https://docs.datastax.com/en/langflow/astra-components.html",
            "edited": false,
            "field_order": [
              "token",
              "environment",
              "database_name",
              "api_endpoint",
              "keyspace",
              "collection_name",
              "embedding_model",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "search_method",
              "reranker",
              "lexical_terms",
              "number_of_results",
              "search_type",
              "search_score_threshold",
              "advanced_search_filter",
              "autodetect_collection",
              "content_field",
              "deletion_field",
              "ignore_invalid_documents",
              "astradb_vectorstore_kwargs"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "key": "AstraDB",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "hidden": null,
                "method": "search_documents",
                "name": "search_results",
                "options": null,
                "required_inputs": [
                  "collection_name",
                  "database_name",
                  "token"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": null,
                "method": "as_dataframe",
                "name": "dataframe",
                "options": null,
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Vector Store Connection",
                "hidden": true,
                "method": "as_vector_store",
                "name": "vectorstoreconnection",
                "options": null,
                "required_inputs": null,
                "selected": "VectorStore",
                "tool_mode": true,
                "types": [
                  "VectorStore"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.007568328950209746,
            "template": {
              "_type": "Component",
              "advanced_search_filter": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "Search Metadata Filter",
                "dynamic": false,
                "info": "Optional dictionary of filters to apply to the search query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "advanced_search_filter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "api_endpoint": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Astra DB API Endpoint",
                "dynamic": false,
                "info": "The API Endpoint for the Astra DB instance. Supercedes database selection.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "api_endpoint",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://184938ef-71ea-49ca-b3ba-28452e797e1e-us-east-2.apps.astra.datastax.com"
              },
              "astradb_vectorstore_kwargs": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "AstraDBVectorStore Parameters",
                "dynamic": false,
                "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.",
                "list": false,
                "list_add_label": "Add More",
                "name": "astradb_vectorstore_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "autodetect_collection": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Autodetect Collection",
                "dynamic": false,
                "info": "Boolean flag to determine whether to autodetect the collection.",
                "list": false,
                "list_add_label": "Add More",
                "name": "autodetect_collection",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\nfrom collections import defaultdict\nfrom dataclasses import asdict, dataclass, field\n\nfrom astrapy import DataAPIClient, Database\nfrom astrapy.data.info.reranking import RerankServiceOptions\nfrom astrapy.info import CollectionDescriptor, CollectionLexicalOptions, CollectionRerankOptions\nfrom langchain_astradb import AstraDBVectorStore, VectorServiceOptions\nfrom langchain_astradb.utils.astradb import HybridSearchMode, _AstraDBCollectionEnvironment\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.vector_store_connection_decorator import vector_store_connection\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import FloatInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    QueryInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\nfrom langflow.utils.version import get_version_info\n\n\n@vector_store_connection\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Ingest and search documents in Astra DB\"\n    documentation: str = \"https://docs.datastax.com/en/langflow/astra-components.html\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_database\",\n                        \"description\": \"Please allow several minutes for creation to complete.\",\n                        \"display_name\": \"Create new database\",\n                        \"field_order\": [\"01_new_database_name\", \"02_cloud_provider\", \"03_region\"],\n                        \"template\": {\n                            \"01_new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[],\n                                required=True,\n                                real_time_refresh=True,\n                            ),\n                            \"03_region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_collection\",\n                        \"description\": \"Please allow several seconds for creation to complete.\",\n                        \"display_name\": \"Create new collection\",\n                        \"field_order\": [\n                            \"01_new_collection_name\",\n                            \"02_embedding_generation_provider\",\n                            \"03_embedding_generation_model\",\n                            \"04_dimension\",\n                        ],\n                        \"template\": {\n                            \"01_new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding generation method\",\n                                info=\"Provider to use for generating embeddings.\",\n                                helper_text=(\n                                    \"To create collections with more embedding provider options, go to \"\n                                    '<a class=\"underline\" href=\"https://astra.datastax.com/\" target=\" _blank\" '\n                                    'rel=\"noopener noreferrer\">your database in Astra DB</a>'\n                                ),\n                                real_time_refresh=True,\n                                required=True,\n                                options=[],\n                            ),\n                            \"03_embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding model\",\n                                info=\"Model to use for generating embeddings.\",\n                                real_time_refresh=True,\n                                options=[],\n                            ),\n                            \"04_dimension\": IntInput(\n                                name=\"dimension\",\n                                display_name=\"Dimensions\",\n                                info=\"Dimensions of the embeddings to generate.\",\n                                value=None,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        DropdownInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            options=[\"prod\", \"test\", \"dev\"],\n            value=\"prod\",\n            advanced=True,\n            real_time_refresh=True,\n            combobox=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"The Database name for the Astra DB instance.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewDatabaseInput()),\n            combobox=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\",\n            info=\"The API Endpoint for the Astra DB instance. Supercedes database selection.\",\n            show=False,\n        ),\n        DropdownInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n            options=[],\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewCollectionInput()),\n            combobox=True,\n            show=False,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Specify the Embedding Model. Not required for Astra Vectorize collections.\",\n            required=False,\n            show=False,\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"search_method\",\n            display_name=\"Search Method\",\n            info=(\n                \"Determine how your content is matched: Vector finds semantic similarity, \"\n                \"and Hybrid Search (suggested) combines both approaches \"\n                \"with a reranker.\"\n            ),\n            options=[\"Hybrid Search\", \"Vector Search\"],  # TODO: Restore Lexical Search?\n            options_metadata=[{\"icon\": \"SearchHybrid\"}, {\"icon\": \"SearchVector\"}],\n            value=\"Vector Search\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"reranker\",\n            display_name=\"Reranker\",\n            info=\"Post-retrieval model that re-scores results for optimal relevance ranking.\",\n            show=False,\n            toggle=True,\n        ),\n        QueryInput(\n            name=\"lexical_terms\",\n            display_name=\"Lexical Terms\",\n            info=\"Add additional terms/keywords to augment search precision.\",\n            placeholder=\"Enter terms to search...\",\n            separator=\" \",\n            show=False,\n            value=\"\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"autodetect_collection\",\n            display_name=\"Autodetect Collection\",\n            info=\"Boolean flag to determine whether to autodetect the collection.\",\n            advanced=True,\n            value=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        # TODO: Programmatically fetch the regions for each cloud provider\n        return {\n            \"dev\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-west-2\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\", \"europe-west4\"],\n                },\n            },\n            \"test\": {\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\"],\n                },\n            },\n            \"prod\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-east1\"],\n                },\n                \"Microsoft Azure\": {\n                    \"id\": \"azure\",\n                    \"regions\": [\"westus3\"],\n                },\n            },\n        }\n\n    @classmethod\n    def get_vectorize_providers(cls, token: str, environment: str | None = None, api_endpoint: str | None = None):\n        try:\n            # Get the admin object\n            client = DataAPIClient(environment=environment)\n            admin_client = client.get_admin()\n            db_admin = admin_client.get_database_admin(api_endpoint, token=token)\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers.embedding_providers.items():\n                # Get the provider display name and models\n                display_name = provider_data.display_name\n                models = [model.name for model in provider_data.models]\n\n                # Build our mapping\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as _:  # noqa: BLE001\n            return {}\n\n    @classmethod\n    async def create_database_api(\n        cls,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n        token: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n    ):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the environment, set to prod if null like\n        my_env = environment or \"prod\"\n\n        # Raise a value error if name isn't provided\n        if not new_database_name:\n            msg = \"Database name is required to create a new database.\"\n            raise ValueError(msg)\n\n        # Call the create database function\n        return await admin_client.async_create_database(\n            name=new_database_name,\n            cloud_provider=cls.map_cloud_providers()[my_env][cloud_provider][\"id\"],\n            region=region,\n            keyspace=keyspace,\n            wait_until_active=False,\n        )\n\n    @classmethod\n    async def create_collection_api(\n        cls,\n        new_collection_name: str,\n        token: str,\n        api_endpoint: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n        reranker: str | None = None,\n    ):\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            providers = cls.get_vectorize_providers(token=token, environment=environment, api_endpoint=api_endpoint)\n            vectorize_options = VectorServiceOptions(\n                provider=providers.get(embedding_generation_provider, [None, []])[0],\n                model_name=embedding_generation_model,\n            )\n\n        # Raise a value error if name isn't provided\n        if not new_collection_name:\n            msg = \"Collection name is required to create a new collection.\"\n            raise ValueError(msg)\n\n        # Define the base arguments being passed to the create collection function\n        base_args = {\n            \"collection_name\": new_collection_name,\n            \"token\": token,\n            \"api_endpoint\": api_endpoint,\n            \"keyspace\": keyspace,\n            \"environment\": environment,\n            \"embedding_dimension\": dimension,\n            \"collection_vector_service_options\": vectorize_options,\n        }\n\n        # Add optional arguments only if environment is \"dev\"\n        if environment == \"dev\" and reranker:  # TODO: Remove conditional check soon\n            # Split the reranker field into a provider a model name\n            provider, _ = reranker.split(\"/\")\n            base_args[\"collection_rerank\"] = CollectionRerankOptions(\n                service=RerankServiceOptions(provider=provider, model_name=reranker),\n            )\n            base_args[\"collection_lexical\"] = CollectionLexicalOptions(analyzer=\"STANDARD\")\n\n        _AstraDBCollectionEnvironment(**base_args)\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = admin_client.list_databases()\n\n        # Generate the api endpoint for each database\n        db_info_dict = {}\n        for db in db_list:\n            try:\n                # Get the API endpoint for the database\n                api_endpoint = db.regions[0].api_endpoint\n\n                # Get the number of collections\n                try:\n                    # Get the number of collections in the database\n                    num_collections = len(\n                        client.get_database(\n                            api_endpoint,\n                            token=token,\n                        ).list_collection_names()\n                    )\n                except Exception:  # noqa: BLE001\n                    if db.status != \"PENDING\":\n                        continue\n                    num_collections = 0\n\n                # Add the database to the dictionary\n                db_info_dict[db.name] = {\n                    \"api_endpoint\": api_endpoint,\n                    \"keyspaces\": db.keyspaces,\n                    \"collections\": num_collections,\n                    \"status\": db.status if db.status != \"ACTIVE\" else None,\n                    \"org_id\": db.org_id if db.org_id else None,\n                }\n            except Exception:  # noqa: BLE001, S110\n                pass\n\n        return db_info_dict\n\n    def get_database_list(self):\n        return self.get_database_list_static(\n            token=self.token,\n            environment=self.environment,\n        )\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # If the api_endpoint is set, return it\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Grab the database object\n        db = cls.get_database_list_static(token=token, environment=environment).get(database_name)\n        if not db:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return db.get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    @classmethod\n    def get_database_id_static(cls, api_endpoint: str) -> str | None:\n        # Pattern matches standard UUID format: 8-4-4-4-12 hexadecimal characters\n        uuid_pattern = r\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\"\n        match = re.search(uuid_pattern, api_endpoint)\n\n        return match.group(0) if match else None\n\n    def get_database_id(self):\n        return self.get_database_id_static(api_endpoint=self.get_api_endpoint())\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return \"default_keyspace\"\n\n    def get_database_object(self, api_endpoint: str | None = None):\n        try:\n            client = DataAPIClient(environment=self.environment)\n\n            return client.get_database(\n                api_endpoint or self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:\n            msg = f\"Error fetching database object: {e}\"\n            raise ValueError(msg) from e\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(environment=self.environment)\n\n                database = client.get_database(\n                    self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name)\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\n                    \"name\": name,\n                    \"status\": info[\"status\"],\n                    \"collections\": info[\"collections\"],\n                    \"api_endpoint\": info[\"api_endpoint\"],\n                    \"keyspaces\": info[\"keyspaces\"],\n                    \"org_id\": info[\"org_id\"],\n                }\n                for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:\n            msg = f\"Error fetching database options: {e}\"\n            raise ValueError(msg) from e\n\n    @classmethod\n    def get_provider_icon(cls, collection: CollectionDescriptor | None = None, provider_name: str | None = None) -> str:\n        # Get the provider name from the collection\n        provider_name = provider_name or (\n            collection.definition.vector.service.provider\n            if (\n                collection\n                and collection.definition\n                and collection.definition.vector\n                and collection.definition.vector.service\n            )\n            else None\n        )\n\n        # If there is no provider, use the vector store icon\n        if not provider_name or provider_name.lower() == \"bring your own\":\n            return \"vectorstores\"\n\n        # Map provider casings\n        case_map = {\n            \"nvidia\": \"NVIDIA\",\n            \"openai\": \"OpenAI\",\n            \"amazon bedrock\": \"AmazonBedrockEmbeddings\",\n            \"azure openai\": \"AzureOpenAiEmbeddings\",\n            \"cohere\": \"Cohere\",\n            \"jina ai\": \"JinaAI\",\n            \"mistral ai\": \"MistralAI\",\n            \"upstage\": \"Upstage\",\n            \"voyage ai\": \"VoyageAI\",\n        }\n\n        # Adjust the casing on some like nvidia\n        return case_map[provider_name.lower()] if provider_name.lower() in case_map else provider_name.title()\n\n    def _initialize_collection_options(self, api_endpoint: str | None = None):\n        # Nothing to generate if we don't have an API endpoint yet\n        api_endpoint = api_endpoint or self.get_api_endpoint()\n        if not api_endpoint:\n            return []\n\n        # Retrieve the database object\n        database = self.get_database_object(api_endpoint=api_endpoint)\n\n        # Get the list of collections\n        collection_list = database.list_collections(keyspace=self.get_keyspace())\n\n        # Return the list of collections and metadata associated\n        return [\n            {\n                \"name\": col.name,\n                \"records\": self.collection_data(collection_name=col.name, database=database),\n                \"provider\": (\n                    col.definition.vector.service.provider\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n                \"icon\": self.get_provider_icon(collection=col),\n                \"model\": (\n                    col.definition.vector.service.model_name\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n            }\n            for col in collection_list\n        ]\n\n    def reset_provider_options(self, build_config: dict) -> dict:\n        \"\"\"Reset provider options and related configurations in the build_config dictionary.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get vectorize providers\n        vectorize_providers_api = self.get_vectorize_providers(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n        )\n\n        # Create a new dictionary with \"Bring your own\" first\n        vectorize_providers: dict[str, list[list[str]]] = {\"Bring your own\": [[], []]}\n\n        # Add the remaining items (only Nvidia) from the original dictionary\n        vectorize_providers.update(\n            {\n                k: v\n                for k, v in vectorize_providers_api.items()\n                if k.lower() in [\"nvidia\"]  # TODO: Eventually support more\n            }\n        )\n\n        # Set provider options\n        provider_field = \"02_embedding_generation_provider\"\n        template[provider_field][\"options\"] = list(vectorize_providers.keys())\n\n        # Add metadata for each provider option\n        template[provider_field][\"options_metadata\"] = [\n            {\"icon\": self.get_provider_icon(provider_name=provider)} for provider in template[provider_field][\"options\"]\n        ]\n\n        # Get selected embedding provider\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure embedding model field\n        model_field = \"03_embedding_generation_model\"\n        template[model_field].update(\n            {\n                \"options\": vectorize_providers.get(embedding_provider, [[], []])[1],\n                \"placeholder\": \"Bring your own\" if is_bring_your_own else None,\n                \"readonly\": is_bring_your_own,\n                \"required\": not is_bring_your_own,\n                \"value\": None,\n            }\n        )\n\n        # If this is a bring your own, set dimensions to 0\n        return self.reset_dimension_field(build_config)\n\n    def reset_dimension_field(self, build_config: dict) -> dict:\n        \"\"\"Reset dimension field options based on provided configuration.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get selected embedding model\n        provider_field = \"02_embedding_generation_provider\"\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure dimension field\n        dimension_field = \"04_dimension\"\n        dimension_value = 1024 if not is_bring_your_own else None  # TODO: Dynamically figure this out\n        template[dimension_field].update(\n            {\n                \"placeholder\": dimension_value,\n                \"value\": dimension_value,\n                \"readonly\": not is_bring_your_own,\n                \"required\": is_bring_your_own,\n            }\n        )\n\n        return build_config\n\n    def reset_collection_list(self, build_config: dict) -> dict:\n        \"\"\"Reset collection list options based on provided configuration.\"\"\"\n        # Get collection options\n        collection_options = self._initialize_collection_options(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        # Update collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update(\n            {\n                \"options\": [col[\"name\"] for col in collection_options],\n                \"options_metadata\": [{k: v for k, v in col.items() if k != \"name\"} for col in collection_options],\n            }\n        )\n\n        # Reset selected collection if not in options\n        if collection_config[\"value\"] not in collection_config[\"options\"]:\n            collection_config[\"value\"] = \"\"\n\n        # Set advanced status based on database selection\n        collection_config[\"show\"] = bool(build_config[\"database_name\"][\"value\"])\n\n        return build_config\n\n    def reset_database_list(self, build_config: dict) -> dict:\n        \"\"\"Reset database list options and related configurations.\"\"\"\n        # Get database options\n        database_options = self._initialize_database_options()\n\n        # Update cloud provider options\n        env = self.environment\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_cloud_provider\"][\"options\"] = list(self.map_cloud_providers()[env].keys())\n\n        # Update database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update(\n            {\n                \"options\": [db[\"name\"] for db in database_options],\n                \"options_metadata\": [{k: v for k, v in db.items() if k != \"name\"} for db in database_options],\n            }\n        )\n\n        # Reset selections if value not in options\n        if database_config[\"value\"] not in database_config[\"options\"]:\n            database_config[\"value\"] = \"\"\n            build_config[\"api_endpoint\"][\"value\"] = \"\"\n            build_config[\"collection_name\"][\"show\"] = False\n\n        # Set advanced status based on token presence\n        database_config[\"show\"] = bool(build_config[\"token\"][\"value\"])\n\n        return build_config\n\n    def reset_build_config(self, build_config: dict) -> dict:\n        \"\"\"Reset all build configuration options to default empty state.\"\"\"\n        # Reset database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n        build_config[\"api_endpoint\"][\"value\"] = \"\"\n\n        # Reset collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n\n        return build_config\n\n    def _handle_hybrid_search_options(self, build_config: dict) -> dict:\n        \"\"\"Set hybrid search options in the build configuration.\"\"\"\n        # Detect what hybrid options are available\n        # Get the admin object\n        client = DataAPIClient(environment=self.environment)\n        admin_client = client.get_admin()\n        db_admin = admin_client.get_database_admin(self.get_api_endpoint(), token=self.token)\n\n        # We will try to get the reranking providers to see if its hybrid emabled\n        try:\n            providers = db_admin.find_reranking_providers()\n            build_config[\"reranker\"][\"options\"] = [\n                model.name for provider_data in providers.reranking_providers.values() for model in provider_data.models\n            ]\n            build_config[\"reranker\"][\"options_metadata\"] = [\n                {\"icon\": self.get_provider_icon(provider_name=model.name.split(\"/\")[0])}\n                for provider in providers.reranking_providers.values()\n                for model in provider.models\n            ]\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Set the default search field to hybrid search\n            build_config[\"search_method\"][\"show\"] = True\n            build_config[\"search_method\"][\"options\"] = [\"Hybrid Search\", \"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Hybrid Search\"\n        except Exception as _:  # noqa: BLE001\n            build_config[\"reranker\"][\"options\"] = []\n            build_config[\"reranker\"][\"options_metadata\"] = []\n\n            # Set the default search field to vector search\n            build_config[\"search_method\"][\"show\"] = False\n            build_config[\"search_method\"][\"options\"] = [\"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Vector Search\"\n\n        # Set reranker and lexical terms options based on search method\n        build_config[\"reranker\"][\"toggle_value\"] = True\n        build_config[\"reranker\"][\"show\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        build_config[\"reranker\"][\"toggle_disable\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        if build_config[\"reranker\"][\"show\"]:\n            build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field name and value.\"\"\"\n        # Early return if no token provided\n        if not self.token:\n            return self.reset_build_config(build_config)\n\n        # Database creation callback\n        if field_name == \"database_name\" and isinstance(field_value, dict):\n            if \"01_new_database_name\" in field_value:\n                await self._create_new_database(build_config, field_value)\n                return self.reset_collection_list(build_config)\n            return self._update_cloud_regions(build_config, field_value)\n\n        # Collection creation callback\n        if field_name == \"collection_name\" and isinstance(field_value, dict):\n            # Case 1: New collection creation\n            if \"01_new_collection_name\" in field_value:\n                await self._create_new_collection(build_config, field_value)\n                return build_config\n\n            # Case 2: Update embedding provider options\n            if \"02_embedding_generation_provider\" in field_value:\n                return self.reset_provider_options(build_config)\n\n            # Case 3: Update dimension field\n            if \"03_embedding_generation_model\" in field_value:\n                return self.reset_dimension_field(build_config)\n\n        # Initial execution or token/environment change\n        first_run = field_name == \"collection_name\" and not field_value and not build_config[\"database_name\"][\"options\"]\n        if first_run or field_name in {\"token\", \"environment\"}:\n            return self.reset_database_list(build_config)\n\n        # Database selection change\n        if field_name == \"database_name\" and not isinstance(field_value, dict):\n            return self._handle_database_selection(build_config, field_value)\n\n        # Keyspace selection change\n        if field_name == \"keyspace\":\n            return self.reset_collection_list(build_config)\n\n        # Collection selection change\n        if field_name == \"collection_name\" and not isinstance(field_value, dict):\n            return self._handle_collection_selection(build_config, field_value)\n\n        # Search method selection change\n        if field_name == \"search_method\":\n            is_vector_search = field_value == \"Vector Search\"\n            is_autodetect = build_config[\"autodetect_collection\"][\"value\"]\n\n            # Configure lexical terms (same for both cases)\n            build_config[\"lexical_terms\"][\"show\"] = not is_vector_search\n            build_config[\"lexical_terms\"][\"value\"] = \"\" if is_vector_search else build_config[\"lexical_terms\"][\"value\"]\n\n            # Disable reranker disabling if hybrid search is selected\n            build_config[\"reranker\"][\"toggle_disable\"] = not is_vector_search\n            build_config[\"reranker\"][\"toggle_value\"] = True\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Toggle search type and score threshold based on search method\n            build_config[\"search_type\"][\"show\"] = is_vector_search\n            build_config[\"search_score_threshold\"][\"show\"] = is_vector_search\n\n            # Make sure the search_type is set to \"Similarity\"\n            if not is_vector_search or is_autodetect:\n                build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def _create_new_database(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new database and update build config options.\"\"\"\n        try:\n            await self.create_database_api(\n                new_database_name=field_value[\"01_new_database_name\"],\n                token=self.token,\n                keyspace=self.get_keyspace(),\n                environment=self.environment,\n                cloud_provider=field_value[\"02_cloud_provider\"],\n                region=field_value[\"03_region\"],\n            )\n        except Exception as e:\n            msg = f\"Error creating database: {e}\"\n            raise ValueError(msg) from e\n\n        build_config[\"database_name\"][\"options\"].append(field_value[\"01_new_database_name\"])\n        build_config[\"database_name\"][\"options_metadata\"].append(\n            {\n                \"status\": \"PENDING\",\n                \"collections\": 0,\n                \"api_endpoint\": None,\n                \"keyspaces\": [self.get_keyspace()],\n                \"org_id\": None,\n            }\n        )\n\n    def _update_cloud_regions(self, build_config: dict, field_value: dict) -> dict:\n        \"\"\"Update cloud provider regions in build config.\"\"\"\n        env = self.environment\n        cloud_provider = field_value[\"02_cloud_provider\"]\n\n        # Update the region options based on the selected cloud provider\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"03_region\"][\"options\"] = self.map_cloud_providers()[env][cloud_provider][\"regions\"]\n\n        # Reset the the 03_region value if it's not in the new options\n        if template[\"03_region\"][\"value\"] not in template[\"03_region\"][\"options\"]:\n            template[\"03_region\"][\"value\"] = None\n\n        return build_config\n\n    async def _create_new_collection(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new collection and update build config options.\"\"\"\n        embedding_provider = field_value.get(\"02_embedding_generation_provider\")\n        try:\n            await self.create_collection_api(\n                new_collection_name=field_value[\"01_new_collection_name\"],\n                token=self.token,\n                api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n                environment=self.environment,\n                keyspace=self.get_keyspace(),\n                dimension=field_value.get(\"04_dimension\") if embedding_provider == \"Bring your own\" else None,\n                embedding_generation_provider=embedding_provider,\n                embedding_generation_model=field_value.get(\"03_embedding_generation_model\"),\n                reranker=self.reranker,\n            )\n        except Exception as e:\n            msg = f\"Error creating collection: {e}\"\n            raise ValueError(msg) from e\n\n        provider = embedding_provider.lower() if embedding_provider and embedding_provider != \"Bring your own\" else None\n        build_config[\"collection_name\"].update(\n            {\n                \"value\": field_value[\"01_new_collection_name\"],\n                \"options\": build_config[\"collection_name\"][\"options\"] + [field_value[\"01_new_collection_name\"]],\n            }\n        )\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n        build_config[\"collection_name\"][\"options_metadata\"].append(\n            {\n                \"records\": 0,\n                \"provider\": provider,\n                \"icon\": self.get_provider_icon(provider_name=provider),\n                \"model\": field_value.get(\"03_embedding_generation_model\"),\n            }\n        )\n\n        # Make sure we always show the reranker options if the collection is hybrid enabled\n        # And right now they always are\n        build_config[\"lexical_terms\"][\"show\"] = True\n\n    def _handle_database_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle database selection and update related configurations.\"\"\"\n        build_config = self.reset_database_list(build_config)\n\n        # Reset collection list if database selection changes\n        if field_value not in build_config[\"database_name\"][\"options\"]:\n            build_config[\"database_name\"][\"value\"] = \"\"\n            return build_config\n\n        # Get the api endpoint for the selected database\n        index = build_config[\"database_name\"][\"options\"].index(field_value)\n        build_config[\"api_endpoint\"][\"value\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"api_endpoint\"]\n\n        # Get the org_id for the selected database\n        org_id = build_config[\"database_name\"][\"options_metadata\"][index][\"org_id\"]\n        if not org_id:\n            return build_config\n\n        # Update the list of keyspaces based on the db info\n        build_config[\"keyspace\"][\"options\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"keyspaces\"]\n        build_config[\"keyspace\"][\"value\"] = (\n            build_config[\"keyspace\"][\"options\"] and build_config[\"keyspace\"][\"options\"][0]\n            if build_config[\"keyspace\"][\"value\"] not in build_config[\"keyspace\"][\"options\"]\n            else build_config[\"keyspace\"][\"value\"]\n        )\n\n        # Get the database id for the selected database\n        db_id = self.get_database_id_static(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        keyspace = self.get_keyspace()\n\n        # Update the helper text for the embedding provider field\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_embedding_generation_provider\"][\"helper_text\"] = (\n            \"To create collections with more embedding provider options, go to \"\n            f'<a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" '\n            f'href=\"https://astra.datastax.com/org/{org_id}/database/{db_id}/data-explorer?createCollection=1&namespace={keyspace}\">'\n            \"your database in Astra DB</a>.\"\n        )\n\n        # Reset provider options\n        build_config = self.reset_provider_options(build_config)\n\n        # Handle hybrid search options\n        build_config = self._handle_hybrid_search_options(build_config)\n\n        return self.reset_collection_list(build_config)\n\n    def _handle_collection_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle collection selection and update embedding options.\"\"\"\n        build_config[\"autodetect_collection\"][\"value\"] = True\n        build_config = self.reset_collection_list(build_config)\n\n        # Reset embedding model if collection selection changes\n        if field_value and field_value not in build_config[\"collection_name\"][\"options\"]:\n            build_config[\"collection_name\"][\"options\"].append(field_value)\n            build_config[\"collection_name\"][\"options_metadata\"].append(\n                {\n                    \"records\": 0,\n                    \"provider\": None,\n                    \"icon\": \"vectorstores\",\n                    \"model\": None,\n                }\n            )\n            build_config[\"autodetect_collection\"][\"value\"] = False\n\n        if not field_value:\n            return build_config\n\n        # Get the selected collection index\n        index = build_config[\"collection_name\"][\"options\"].index(field_value)\n\n        # Set the provider of the selected collection\n        provider = build_config[\"collection_name\"][\"options_metadata\"][index][\"provider\"]\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n\n        # Grab the collection object\n        database = self.get_database_object(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        collection = database.get_collection(\n            name=field_value,\n            keyspace=build_config[\"keyspace\"][\"value\"],\n        )\n\n        # Check if hybrid and lexical are enabled\n        col_options = collection.options()\n        hyb_enabled = col_options.rerank and col_options.rerank.enabled\n        lex_enabled = col_options.lexical and col_options.lexical.enabled\n        user_hyb_enabled = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n\n        # Show lexical terms if the collection is hybrid enabled\n        build_config[\"lexical_terms\"][\"show\"] = hyb_enabled and lex_enabled and user_hyb_enabled\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = {\"embedding\": self.embedding_model} if self.embedding_model else {}\n\n        # Get the additional parameters\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Langflow version and platform information\n        __version__ = get_version_info()[\"version\"]\n        langflow_prefix = \"\"\n        # if os.getenv(\"AWS_EXECUTION_ENV\") == \"AWS_ECS_FARGATE\":  # TODO: More precise way of detecting\n        #     langflow_prefix = \"ds-\"\n\n        # Get the database object\n        database = self.get_database_object()\n        autodetect = self.collection_name in database.list_collection_names() and self.autodetect_collection\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": autodetect,\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params\n                    and self.collection_data(collection_name=self.collection_name, database=database) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Choose HybridSearchMode based on the selected param\n        hybrid_search_mode = HybridSearchMode.DEFAULT if self.search_method == \"Hybrid Search\" else HybridSearchMode.OFF\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=database.api_endpoint,\n                namespace=database.keyspace,\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Hybrid Search Parameters\n                hybrid_search=hybrid_search_mode,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{langflow_prefix}langflow\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        # Add documents to the vector store\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=database.keyspace)\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        # Clean up the search query\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n        lexical_terms = self.lexical_terms or None\n\n        # Check if we have a search query, and if so set the args\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n                \"lexical_query\": lexical_terms,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n        self.log(f\"store.hybrid_search: {vector_store.hybrid_search}\")\n        self.log(f\"Lexical terms: {self.lexical_terms}\")\n        self.log(f\"Reranker: {self.reranker}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
              },
              "collection_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several seconds for creation to complete.",
                        "display_name": "Create new collection",
                        "field_order": [
                          "01_new_collection_name",
                          "02_embedding_generation_provider",
                          "03_embedding_generation_model",
                          "04_dimension"
                        ],
                        "name": "create_collection",
                        "template": {
                          "01_new_collection_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new collection to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_collection_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_embedding_generation_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding generation method",
                            "dynamic": false,
                            "helper_text": "To create collections with more embedding provider options, go to <a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://astra.datastax.com/org/19f3ca42-5972-47ae-8853-627885ad357f/database/184938ef-71ea-49ca-b3ba-28452e797e1e/data-explorer?createCollection=1&namespace=default_keyspace\">your database in Astra DB</a>.",
                            "info": "Provider to use for generating embeddings.",
                            "name": "embedding_generation_provider",
                            "options": [
                              "Bring your own",
                              "Nvidia"
                            ],
                            "options_metadata": [
                              {
                                "icon": "vectorstores"
                              },
                              {
                                "icon": "NVIDIA"
                              }
                            ],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_embedding_generation_model": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding model",
                            "dynamic": false,
                            "info": "Model to use for generating embeddings.",
                            "name": "embedding_generation_model",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": null,
                            "readonly": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": null
                          },
                          "04_dimension": {
                            "_input_type": "IntInput",
                            "advanced": false,
                            "display_name": "Dimensions",
                            "dynamic": false,
                            "info": "Dimensions of the embeddings to generate.",
                            "list": false,
                            "list_add_label": "Add More",
                            "name": "dimension",
                            "placeholder": 1024,
                            "readonly": true,
                            "required": "",
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 1024
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Collection",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "name": "collection_name",
                "options": [
                  "text_embeddings",
                  "text_embeddings_2",
                  "text_embeddings_3",
                  "ve_1",
                  "ve_2",
                  "video_embeddings",
                  "video_embeddings_2",
                  "video_embeddings_4",
                  "video_embeddings_5",
                  "video_embeddings_6",
                  "video_embeddings_7"
                ],
                "options_metadata": [
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 3
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 2
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 0
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 23
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 2
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 295
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 12
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 12
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 19
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 0
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 8
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "video_embeddings"
              },
              "content_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Content Field",
                "dynamic": false,
                "info": "Field to use as the text content field for the vector store.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "database_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several minutes for creation to complete.",
                        "display_name": "Create new database",
                        "field_order": [
                          "01_new_database_name",
                          "02_cloud_provider",
                          "03_region"
                        ],
                        "name": "create_database",
                        "template": {
                          "01_new_database_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new database to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_database_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_cloud_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Cloud provider",
                            "dynamic": false,
                            "info": "Cloud provider for the new database.",
                            "name": "cloud_provider",
                            "options": [
                              "Amazon Web Services",
                              "Google Cloud Platform",
                              "Microsoft Azure"
                            ],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_region": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Region",
                            "dynamic": false,
                            "info": "Region for the new database.",
                            "name": "region",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Database",
                "dynamic": false,
                "info": "The Database name for the Astra DB instance.",
                "name": "database_name",
                "options": [
                  "video_embeddings"
                ],
                "options_metadata": [
                  {
                    "api_endpoint": "https://184938ef-71ea-49ca-b3ba-28452e797e1e-us-east-2.apps.astra.datastax.com",
                    "collections": 11,
                    "keyspaces": [
                      "default_keyspace"
                    ],
                    "org_id": "19f3ca42-5972-47ae-8853-627885ad357f",
                    "status": "MAINTENANCE"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "video_embeddings"
              },
              "deletion_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Deletion Based On Field",
                "dynamic": false,
                "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deletion_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "embedding_model": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding Model",
                "dynamic": false,
                "info": "Specify the Embedding Model. Not required for Astra Vectorize collections.",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_model",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "environment": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Environment",
                "dynamic": false,
                "info": "The environment for the Astra DB API Endpoint.",
                "name": "environment",
                "options": [
                  "prod",
                  "test",
                  "dev"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "prod"
              },
              "ignore_invalid_documents": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Invalid Documents",
                "dynamic": false,
                "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_invalid_documents",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "keyspace": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Keyspace",
                "dynamic": false,
                "info": "Optional keyspace within Astra DB to use for the collection.",
                "name": "keyspace",
                "options": [
                  "default_keyspace"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default_keyspace"
              },
              "lexical_terms": {
                "_input_type": "QueryInput",
                "advanced": true,
                "display_name": "Lexical Terms",
                "dynamic": false,
                "info": "Add additional terms/keywords to augment search precision.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "lexical_terms",
                "placeholder": "Enter terms to search...",
                "required": false,
                "separator": " ",
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Search Results",
                "dynamic": false,
                "info": "Number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "reranker": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Reranker",
                "dynamic": false,
                "info": "Post-retrieval model that re-scores results for optimal relevance ranking.",
                "name": "reranker",
                "options": [
                  "nvidia/llama-3.2-nv-rerankqa-1b-v2"
                ],
                "options_metadata": [
                  {
                    "icon": "NVIDIA"
                  }
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": true,
                "toggle_disable": true,
                "toggle_value": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "nvidia/llama-3.2-nv-rerankqa-1b-v2"
              },
              "search_method": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Method",
                "dynamic": false,
                "info": "Determine how your content is matched: Vector finds semantic similarity, and Hybrid Search (suggested) combines both approaches with a reranker.",
                "name": "search_method",
                "options": [
                  "Hybrid Search",
                  "Vector Search"
                ],
                "options_metadata": [
                  {
                    "icon": "SearchHybrid"
                  },
                  {
                    "icon": "SearchVector"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Hybrid Search"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "search_score_threshold": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Search Score Threshold",
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "list": false,
                "list_add_label": "Add More",
                "name": "search_score_threshold",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0
              },
              "search_type": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Type",
                "dynamic": false,
                "info": "Search type to use",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity"
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [],
                "load_from_db": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "AstraDB"
        },
        "dragging": false,
        "id": "AstraDB-Kb5EQ",
        "measured": {
          "height": 675,
          "width": 320
        },
        "position": {
          "x": 612.3518020499359,
          "y": -256.7678583771339
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Index videos using Twelve Labs and add the video_id to metadata.",
          "display_name": "Twelve Labs Pegasus Index Video",
          "id": "TwelveLabsPegasusIndexVideo-uWtUi",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Index videos using Twelve Labs and add the video_id to metadata.",
            "display_name": "Twelve Labs Pegasus Index Video",
            "documentation": "",
            "edited": false,
            "field_order": [
              "videodata",
              "api_key",
              "model_name",
              "index_name",
              "index_id"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Indexed Data",
                "hidden": false,
                "method": "index_videos",
                "name": "indexed_data",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Twelve Labs API Key",
                "dynamic": false,
                "info": "Enter your Twelve Labs API Key.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DataInput, SecretStrInput, StrInput, DropdownInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom typing import Dict, Any, List, Tuple\nfrom twelvelabs import TwelveLabs\nimport time\nimport os\nfrom tenacity import retry, stop_after_attempt, wait_exponential\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass PegasusIndexVideo(Component):\n    \"\"\"Indexes videos using Twelve Labs Pegasus API and adds the video ID to metadata.\"\"\"\n\n    display_name = \"Twelve Labs Pegasus Index Video\"\n    description = \"Index videos using Twelve Labs and add the video_id to metadata.\"\n    icon = \"TwelveLabs\"\n    name = \"TwelveLabsPegasusIndexVideo\"\n\n    inputs = [\n        DataInput(\n            name=\"videodata\", \n            display_name=\"Video Data\", \n            info=\"Video Data objects (from VideoFile or SplitVideo)\",\n            is_list=True,\n            required=True\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Twelve Labs API Key\",\n            info=\"Enter your Twelve Labs API Key.\",\n            required=True\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"Pegasus model to use for indexing\",\n            options=[\"pegasus1.2\"],\n            value=\"pegasus1.2\",\n            advanced=False,\n        ),\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            info=\"Name of the index to use. If the index doesn't exist, it will be created.\",\n            required=False\n        ),\n        StrInput(\n            name=\"index_id\",\n            display_name=\"Index ID\",\n            info=\"ID of an existing index to use. If provided, index_name will be ignored.\",\n            required=False\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Indexed Data\",\n            name=\"indexed_data\",\n            method=\"index_videos\",\n            output_types=[\"Data\"],\n            is_list=True\n        ),\n    ]\n\n    def _get_or_create_index(self, client: TwelveLabs) -> Tuple[str, str]:\n        \"\"\"Get existing index or create new one. Returns (index_id, index_name)\"\"\"\n        \n        # First check if index_id is provided and valid\n        if hasattr(self, 'index_id') and self.index_id:\n            try:\n                index = client.index.retrieve(id=self.index_id)\n                return self.index_id, index.name\n            except Exception as e:\n                if not hasattr(self, 'index_name') or not self.index_name:\n                    raise ValueError(\"Invalid index ID provided and no index name specified for fallback.\")\n\n        # If index_name is provided, try to find it\n        if hasattr(self, 'index_name') and self.index_name:\n            try:\n                # List all indexes and find by name\n                indexes = client.index.list()\n                for idx in indexes:\n                    if idx.name == self.index_name:\n                        return idx.id, idx.name\n                \n                # If we get here, index wasn't found - create it\n                index = client.index.create(\n                    name=self.index_name,\n                    models=[\n                        {\n                            \"name\": self.model_name if hasattr(self, 'model_name') else \"pegasus1.2\",\n                            \"options\": [\"visual\", \"audio\"]\n                        }\n                    ]\n                )\n                return index.id, index.name\n            except Exception as e:\n                raise\n\n        # If we get here, neither index_id nor index_name was provided\n        raise ValueError(\"Either index_name or index_id must be provided\")\n\n    def on_task_update(self, task, video_path):\n        \"\"\"Callback for task status updates\"\"\"\n        status_msg = f\"Indexing {os.path.basename(video_path)}... Status: {task.status}\"\n        self.status = status_msg\n\n    @retry(\n        stop=stop_after_attempt(5),\n        wait=wait_exponential(multiplier=1, min=5, max=60),\n        reraise=True\n    )\n    def _check_task_status(\n        self, \n        client: TwelveLabs, \n        task_id: str, \n        video_path: str,\n    ) -> Dict[str, Any]:\n        \"\"\"Check task status once\"\"\"\n        task = client.task.retrieve(id=task_id)\n        self.on_task_update(task, video_path)\n        return task\n\n    def _wait_for_task_completion(\n        self, \n        client: TwelveLabs, \n        task_id: str, \n        video_path: str,\n        max_retries: int = 120,\n        sleep_time: int = 10\n    ) -> Dict[str, Any]:\n        \"\"\"Wait for task completion with timeout and improved error handling\"\"\"\n        retries = 0\n        consecutive_errors = 0\n        max_consecutive_errors = 5\n        \n        while retries < max_retries:\n            try:\n                self.status = f\"Checking task status for {os.path.basename(video_path)} (attempt {retries + 1})\"\n                task = self._check_task_status(client, task_id, video_path)\n\n                if task.status == \"ready\":\n                    self.status = f\"Indexing for {os.path.basename(video_path)} completed successfully!\"\n                    return task\n                elif task.status == \"failed\":\n                    error_msg = f\"Task failed for {os.path.basename(video_path)}: {getattr(task, 'error', 'Unknown error')}\"\n                    self.status = error_msg\n                    raise Exception(error_msg)\n                elif task.status == \"error\":\n                    error_msg = f\"Task encountered an error for {os.path.basename(video_path)}: {getattr(task, 'error', 'Unknown error')}\"\n                    self.status = error_msg\n                    raise Exception(error_msg)\n                \n                time.sleep(sleep_time)\n                retries += 1\n                elapsed_time = retries * sleep_time\n                self.status = f\"Indexing {os.path.basename(video_path)}... {elapsed_time}s elapsed\"\n                \n            except Exception as e:\n                consecutive_errors += 1\n                error_msg = f\"Error checking task status for {os.path.basename(video_path)}: {str(e)}\"\n                self.status = error_msg\n                \n                if consecutive_errors >= max_consecutive_errors:\n                    raise Exception(f\"Too many consecutive errors checking task status for {os.path.basename(video_path)}: {error_msg}\")\n                \n                time.sleep(sleep_time * (2 ** consecutive_errors))\n                continue\n        \n        timeout_msg = f\"Timeout waiting for indexing of {os.path.basename(video_path)} after {max_retries * sleep_time} seconds\"\n        self.status = timeout_msg\n        raise TimeoutError(timeout_msg)\n\n    def _upload_video(self, client: TwelveLabs, video_path: str, index_id: str) -> str:\n        \"\"\"Upload a single video and return its task ID\"\"\"\n        with open(video_path, 'rb') as video_file:\n            self.status = f\"Uploading {os.path.basename(video_path)} to index {index_id}...\"\n            task = client.task.create(\n                index_id=index_id,\n                file=video_file\n            )\n            task_id = task.id\n            self.status = f\"Upload complete for {os.path.basename(video_path)}. Task ID: {task_id}\"\n            return task_id\n\n    def index_videos(self) -> List[Data]:\n        \"\"\"Indexes each video and adds the video_id to its metadata.\"\"\"\n        if not self.videodata:\n            self.status = \"No video data provided.\"\n            return []\n        \n        if not self.api_key:\n            raise ValueError(\"Twelve Labs API Key is required.\")\n\n        if not (hasattr(self, 'index_name') and self.index_name) and not (hasattr(self, 'index_id') and self.index_id):\n            raise ValueError(\"Either index_name or index_id must be provided\")\n\n        client = TwelveLabs(api_key=self.api_key)\n        indexed_data_list = []\n        \n        # Get or create the index\n        try:\n            index_id, index_name = self._get_or_create_index(client)\n            self.status = f\"Using index: {index_name} (ID: {index_id})\"\n        except Exception as e:\n            self.status = f\"Failed to get/create Twelve Labs index: {str(e)}\"\n            raise\n\n        # First, validate all videos and create a list of valid ones\n        valid_videos: List[Tuple[Data, str]] = []\n        for video_data_item in self.videodata:\n            if not isinstance(video_data_item, Data):\n                self.status = f\"Skipping invalid data item: {video_data_item}\"\n                continue\n\n            video_info = video_data_item.data\n            if not isinstance(video_info, dict):\n                self.status = f\"Skipping item with invalid data structure: {video_info}\"\n                continue\n\n            video_path = video_info.get('text')\n            if not video_path or not isinstance(video_path, str):\n                self.status = f\"Skipping item with missing or invalid video path: {video_info}\"\n                continue\n\n            if not os.path.exists(video_path):\n                self.status = f\"Video file not found, skipping: {video_path}\"\n                continue\n            \n            valid_videos.append((video_data_item, video_path))\n\n        if not valid_videos:\n            self.status = \"No valid videos to process.\"\n            return []\n\n        # Upload all videos first and collect their task IDs\n        upload_tasks: List[Tuple[Data, str, str]] = []  # (data_item, video_path, task_id)\n        for data_item, video_path in valid_videos:\n            try:\n                task_id = self._upload_video(client, video_path, index_id)\n                upload_tasks.append((data_item, video_path, task_id))\n            except Exception as e:\n                self.status = f\"Failed to upload {video_path}: {str(e)}\"\n                continue\n\n        # Now check all tasks in parallel using a thread pool\n        with ThreadPoolExecutor(max_workers=min(10, len(upload_tasks))) as executor:\n            futures = []\n            for data_item, video_path, task_id in upload_tasks:\n                future = executor.submit(\n                    self._wait_for_task_completion,\n                    client,\n                    task_id,\n                    video_path\n                )\n                futures.append((data_item, video_path, future))\n\n            # Process results as they complete\n            for data_item, video_path, future in futures:\n                try:\n                    completed_task = future.result()\n                    if completed_task.status == \"ready\":\n                        video_id = completed_task.video_id\n                        self.status = f\"Video {os.path.basename(video_path)} indexed successfully. Video ID: {video_id}\"\n                        \n                        # Add video_id to the metadata\n                        video_info = data_item.data\n                        if 'metadata' not in video_info:\n                            video_info['metadata'] = {}\n                        elif not isinstance(video_info['metadata'], dict):\n                            self.status = f\"Warning: Overwriting non-dict metadata for {video_path}\"\n                            video_info['metadata'] = {}\n\n                        video_info['metadata'].update({\n                            'video_id': video_id,\n                            'index_id': index_id,\n                            'index_name': index_name\n                        })\n                        \n                        updated_data_item = Data(data=video_info)\n                        indexed_data_list.append(updated_data_item)\n                except Exception as e:\n                    self.status = f\"Failed to process {video_path}: {str(e)}\"\n\n        if not indexed_data_list:\n            self.status = \"No videos were successfully indexed.\"\n        else:\n            self.status = f\"Finished indexing {len(indexed_data_list)}/{len(self.videodata)} videos.\"\n        \n        return indexed_data_list\n"
              },
              "index_id": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index ID",
                "dynamic": false,
                "info": "ID of an existing index to use. If provided, index_name will be ignored.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "index_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "Name of the index to use. If the index doesn't exist, it will be created.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "test index"
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "Pegasus model to use for indexing",
                "name": "model_name",
                "options": [
                  "pegasus1.2"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "pegasus1.2"
              },
              "videodata": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Video Data",
                "dynamic": false,
                "info": "Video Data objects (from VideoFile or SplitVideo)",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "videodata",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TwelveLabsPegasusIndexVideo"
        },
        "dragging": false,
        "id": "TwelveLabsPegasusIndexVideo-uWtUi",
        "measured": {
          "height": 539,
          "width": 320
        },
        "position": {
          "x": 193.22609959897682,
          "y": -55.79439919257767
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "AstraDB-m6bmc",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "VectorStore"
            ],
            "beta": false,
            "category": "vectorstores",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Ingest and search documents in Astra DB",
            "display_name": "Astra DB",
            "documentation": "https://docs.datastax.com/en/langflow/astra-components.html",
            "edited": false,
            "field_order": [
              "token",
              "environment",
              "database_name",
              "api_endpoint",
              "keyspace",
              "collection_name",
              "embedding_model",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "search_method",
              "reranker",
              "lexical_terms",
              "number_of_results",
              "search_type",
              "search_score_threshold",
              "advanced_search_filter",
              "autodetect_collection",
              "content_field",
              "deletion_field",
              "ignore_invalid_documents",
              "astradb_vectorstore_kwargs"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "key": "AstraDB",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "hidden": null,
                "method": "search_documents",
                "name": "search_results",
                "options": null,
                "required_inputs": [
                  "collection_name",
                  "database_name",
                  "token"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "hidden": null,
                "method": "as_dataframe",
                "name": "dataframe",
                "options": null,
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Vector Store Connection",
                "hidden": true,
                "method": "as_vector_store",
                "name": "vectorstoreconnection",
                "options": null,
                "required_inputs": null,
                "selected": "VectorStore",
                "tool_mode": true,
                "types": [
                  "VectorStore"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.007568328950209746,
            "template": {
              "_type": "Component",
              "advanced_search_filter": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "Search Metadata Filter",
                "dynamic": false,
                "info": "Optional dictionary of filters to apply to the search query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "advanced_search_filter",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "api_endpoint": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Astra DB API Endpoint",
                "dynamic": false,
                "info": "The API Endpoint for the Astra DB instance. Supercedes database selection.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "api_endpoint",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "https://184938ef-71ea-49ca-b3ba-28452e797e1e-us-east-2.apps.astra.datastax.com"
              },
              "astradb_vectorstore_kwargs": {
                "_input_type": "NestedDictInput",
                "advanced": true,
                "display_name": "AstraDBVectorStore Parameters",
                "dynamic": false,
                "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.",
                "list": false,
                "list_add_label": "Add More",
                "name": "astradb_vectorstore_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "autodetect_collection": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Autodetect Collection",
                "dynamic": false,
                "info": "Boolean flag to determine whether to autodetect the collection.",
                "list": false,
                "list_add_label": "Add More",
                "name": "autodetect_collection",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import re\nfrom collections import defaultdict\nfrom dataclasses import asdict, dataclass, field\n\nfrom astrapy import DataAPIClient, Database\nfrom astrapy.data.info.reranking import RerankServiceOptions\nfrom astrapy.info import CollectionDescriptor, CollectionLexicalOptions, CollectionRerankOptions\nfrom langchain_astradb import AstraDBVectorStore, VectorServiceOptions\nfrom langchain_astradb.utils.astradb import HybridSearchMode, _AstraDBCollectionEnvironment\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.vector_store_connection_decorator import vector_store_connection\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import FloatInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    QueryInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\nfrom langflow.utils.version import get_version_info\n\n\n@vector_store_connection\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Ingest and search documents in Astra DB\"\n    documentation: str = \"https://docs.datastax.com/en/langflow/astra-components.html\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_database\",\n                        \"description\": \"Please allow several minutes for creation to complete.\",\n                        \"display_name\": \"Create new database\",\n                        \"field_order\": [\"01_new_database_name\", \"02_cloud_provider\", \"03_region\"],\n                        \"template\": {\n                            \"01_new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[],\n                                required=True,\n                                real_time_refresh=True,\n                            ),\n                            \"03_region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"name\": \"create_collection\",\n                        \"description\": \"Please allow several seconds for creation to complete.\",\n                        \"display_name\": \"Create new collection\",\n                        \"field_order\": [\n                            \"01_new_collection_name\",\n                            \"02_embedding_generation_provider\",\n                            \"03_embedding_generation_model\",\n                            \"04_dimension\",\n                        ],\n                        \"template\": {\n                            \"01_new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"02_embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding generation method\",\n                                info=\"Provider to use for generating embeddings.\",\n                                helper_text=(\n                                    \"To create collections with more embedding provider options, go to \"\n                                    '<a class=\"underline\" href=\"https://astra.datastax.com/\" target=\" _blank\" '\n                                    'rel=\"noopener noreferrer\">your database in Astra DB</a>'\n                                ),\n                                real_time_refresh=True,\n                                required=True,\n                                options=[],\n                            ),\n                            \"03_embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding model\",\n                                info=\"Model to use for generating embeddings.\",\n                                real_time_refresh=True,\n                                options=[],\n                            ),\n                            \"04_dimension\": IntInput(\n                                name=\"dimension\",\n                                display_name=\"Dimensions\",\n                                info=\"Dimensions of the embeddings to generate.\",\n                                value=None,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        DropdownInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            options=[\"prod\", \"test\", \"dev\"],\n            value=\"prod\",\n            advanced=True,\n            real_time_refresh=True,\n            combobox=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"The Database name for the Astra DB instance.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewDatabaseInput()),\n            combobox=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\",\n            info=\"The API Endpoint for the Astra DB instance. Supercedes database selection.\",\n            show=False,\n        ),\n        DropdownInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n            options=[],\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            dialog_inputs=asdict(NewCollectionInput()),\n            combobox=True,\n            show=False,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Specify the Embedding Model. Not required for Astra Vectorize collections.\",\n            required=False,\n            show=False,\n        ),\n        *LCVectorStoreComponent.inputs,\n        DropdownInput(\n            name=\"search_method\",\n            display_name=\"Search Method\",\n            info=(\n                \"Determine how your content is matched: Vector finds semantic similarity, \"\n                \"and Hybrid Search (suggested) combines both approaches \"\n                \"with a reranker.\"\n            ),\n            options=[\"Hybrid Search\", \"Vector Search\"],  # TODO: Restore Lexical Search?\n            options_metadata=[{\"icon\": \"SearchHybrid\"}, {\"icon\": \"SearchVector\"}],\n            value=\"Vector Search\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"reranker\",\n            display_name=\"Reranker\",\n            info=\"Post-retrieval model that re-scores results for optimal relevance ranking.\",\n            show=False,\n            toggle=True,\n        ),\n        QueryInput(\n            name=\"lexical_terms\",\n            display_name=\"Lexical Terms\",\n            info=\"Add additional terms/keywords to augment search precision.\",\n            placeholder=\"Enter terms to search...\",\n            separator=\" \",\n            show=False,\n            value=\"\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"autodetect_collection\",\n            display_name=\"Autodetect Collection\",\n            info=\"Boolean flag to determine whether to autodetect the collection.\",\n            advanced=True,\n            value=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        # TODO: Programmatically fetch the regions for each cloud provider\n        return {\n            \"dev\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-west-2\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\", \"europe-west4\"],\n                },\n            },\n            \"test\": {\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-central1\"],\n                },\n            },\n            \"prod\": {\n                \"Amazon Web Services\": {\n                    \"id\": \"aws\",\n                    \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n                },\n                \"Google Cloud Platform\": {\n                    \"id\": \"gcp\",\n                    \"regions\": [\"us-east1\"],\n                },\n                \"Microsoft Azure\": {\n                    \"id\": \"azure\",\n                    \"regions\": [\"westus3\"],\n                },\n            },\n        }\n\n    @classmethod\n    def get_vectorize_providers(cls, token: str, environment: str | None = None, api_endpoint: str | None = None):\n        try:\n            # Get the admin object\n            client = DataAPIClient(environment=environment)\n            admin_client = client.get_admin()\n            db_admin = admin_client.get_database_admin(api_endpoint, token=token)\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers.embedding_providers.items():\n                # Get the provider display name and models\n                display_name = provider_data.display_name\n                models = [model.name for model in provider_data.models]\n\n                # Build our mapping\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as _:  # noqa: BLE001\n            return {}\n\n    @classmethod\n    async def create_database_api(\n        cls,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n        token: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n    ):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the environment, set to prod if null like\n        my_env = environment or \"prod\"\n\n        # Raise a value error if name isn't provided\n        if not new_database_name:\n            msg = \"Database name is required to create a new database.\"\n            raise ValueError(msg)\n\n        # Call the create database function\n        return await admin_client.async_create_database(\n            name=new_database_name,\n            cloud_provider=cls.map_cloud_providers()[my_env][cloud_provider][\"id\"],\n            region=region,\n            keyspace=keyspace,\n            wait_until_active=False,\n        )\n\n    @classmethod\n    async def create_collection_api(\n        cls,\n        new_collection_name: str,\n        token: str,\n        api_endpoint: str,\n        environment: str | None = None,\n        keyspace: str | None = None,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n        reranker: str | None = None,\n    ):\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            providers = cls.get_vectorize_providers(token=token, environment=environment, api_endpoint=api_endpoint)\n            vectorize_options = VectorServiceOptions(\n                provider=providers.get(embedding_generation_provider, [None, []])[0],\n                model_name=embedding_generation_model,\n            )\n\n        # Raise a value error if name isn't provided\n        if not new_collection_name:\n            msg = \"Collection name is required to create a new collection.\"\n            raise ValueError(msg)\n\n        # Define the base arguments being passed to the create collection function\n        base_args = {\n            \"collection_name\": new_collection_name,\n            \"token\": token,\n            \"api_endpoint\": api_endpoint,\n            \"keyspace\": keyspace,\n            \"environment\": environment,\n            \"embedding_dimension\": dimension,\n            \"collection_vector_service_options\": vectorize_options,\n        }\n\n        # Add optional arguments only if environment is \"dev\"\n        if environment == \"dev\" and reranker:  # TODO: Remove conditional check soon\n            # Split the reranker field into a provider a model name\n            provider, _ = reranker.split(\"/\")\n            base_args[\"collection_rerank\"] = CollectionRerankOptions(\n                service=RerankServiceOptions(provider=provider, model_name=reranker),\n            )\n            base_args[\"collection_lexical\"] = CollectionLexicalOptions(analyzer=\"STANDARD\")\n\n        _AstraDBCollectionEnvironment(**base_args)\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = admin_client.list_databases()\n\n        # Generate the api endpoint for each database\n        db_info_dict = {}\n        for db in db_list:\n            try:\n                # Get the API endpoint for the database\n                api_endpoint = db.regions[0].api_endpoint\n\n                # Get the number of collections\n                try:\n                    # Get the number of collections in the database\n                    num_collections = len(\n                        client.get_database(\n                            api_endpoint,\n                            token=token,\n                        ).list_collection_names()\n                    )\n                except Exception:  # noqa: BLE001\n                    if db.status != \"PENDING\":\n                        continue\n                    num_collections = 0\n\n                # Add the database to the dictionary\n                db_info_dict[db.name] = {\n                    \"api_endpoint\": api_endpoint,\n                    \"keyspaces\": db.keyspaces,\n                    \"collections\": num_collections,\n                    \"status\": db.status if db.status != \"ACTIVE\" else None,\n                    \"org_id\": db.org_id if db.org_id else None,\n                }\n            except Exception:  # noqa: BLE001, S110\n                pass\n\n        return db_info_dict\n\n    def get_database_list(self):\n        return self.get_database_list_static(\n            token=self.token,\n            environment=self.environment,\n        )\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # If the api_endpoint is set, return it\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Grab the database object\n        db = cls.get_database_list_static(token=token, environment=environment).get(database_name)\n        if not db:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return db.get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    @classmethod\n    def get_database_id_static(cls, api_endpoint: str) -> str | None:\n        # Pattern matches standard UUID format: 8-4-4-4-12 hexadecimal characters\n        uuid_pattern = r\"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\"\n        match = re.search(uuid_pattern, api_endpoint)\n\n        return match.group(0) if match else None\n\n    def get_database_id(self):\n        return self.get_database_id_static(api_endpoint=self.get_api_endpoint())\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return \"default_keyspace\"\n\n    def get_database_object(self, api_endpoint: str | None = None):\n        try:\n            client = DataAPIClient(environment=self.environment)\n\n            return client.get_database(\n                api_endpoint or self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:\n            msg = f\"Error fetching database object: {e}\"\n            raise ValueError(msg) from e\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(environment=self.environment)\n\n                database = client.get_database(\n                    self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name)\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\n                    \"name\": name,\n                    \"status\": info[\"status\"],\n                    \"collections\": info[\"collections\"],\n                    \"api_endpoint\": info[\"api_endpoint\"],\n                    \"keyspaces\": info[\"keyspaces\"],\n                    \"org_id\": info[\"org_id\"],\n                }\n                for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:\n            msg = f\"Error fetching database options: {e}\"\n            raise ValueError(msg) from e\n\n    @classmethod\n    def get_provider_icon(cls, collection: CollectionDescriptor | None = None, provider_name: str | None = None) -> str:\n        # Get the provider name from the collection\n        provider_name = provider_name or (\n            collection.definition.vector.service.provider\n            if (\n                collection\n                and collection.definition\n                and collection.definition.vector\n                and collection.definition.vector.service\n            )\n            else None\n        )\n\n        # If there is no provider, use the vector store icon\n        if not provider_name or provider_name.lower() == \"bring your own\":\n            return \"vectorstores\"\n\n        # Map provider casings\n        case_map = {\n            \"nvidia\": \"NVIDIA\",\n            \"openai\": \"OpenAI\",\n            \"amazon bedrock\": \"AmazonBedrockEmbeddings\",\n            \"azure openai\": \"AzureOpenAiEmbeddings\",\n            \"cohere\": \"Cohere\",\n            \"jina ai\": \"JinaAI\",\n            \"mistral ai\": \"MistralAI\",\n            \"upstage\": \"Upstage\",\n            \"voyage ai\": \"VoyageAI\",\n        }\n\n        # Adjust the casing on some like nvidia\n        return case_map[provider_name.lower()] if provider_name.lower() in case_map else provider_name.title()\n\n    def _initialize_collection_options(self, api_endpoint: str | None = None):\n        # Nothing to generate if we don't have an API endpoint yet\n        api_endpoint = api_endpoint or self.get_api_endpoint()\n        if not api_endpoint:\n            return []\n\n        # Retrieve the database object\n        database = self.get_database_object(api_endpoint=api_endpoint)\n\n        # Get the list of collections\n        collection_list = database.list_collections(keyspace=self.get_keyspace())\n\n        # Return the list of collections and metadata associated\n        return [\n            {\n                \"name\": col.name,\n                \"records\": self.collection_data(collection_name=col.name, database=database),\n                \"provider\": (\n                    col.definition.vector.service.provider\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n                \"icon\": self.get_provider_icon(collection=col),\n                \"model\": (\n                    col.definition.vector.service.model_name\n                    if col.definition.vector and col.definition.vector.service\n                    else None\n                ),\n            }\n            for col in collection_list\n        ]\n\n    def reset_provider_options(self, build_config: dict) -> dict:\n        \"\"\"Reset provider options and related configurations in the build_config dictionary.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get vectorize providers\n        vectorize_providers_api = self.get_vectorize_providers(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n        )\n\n        # Create a new dictionary with \"Bring your own\" first\n        vectorize_providers: dict[str, list[list[str]]] = {\"Bring your own\": [[], []]}\n\n        # Add the remaining items (only Nvidia) from the original dictionary\n        vectorize_providers.update(\n            {\n                k: v\n                for k, v in vectorize_providers_api.items()\n                if k.lower() in [\"nvidia\"]  # TODO: Eventually support more\n            }\n        )\n\n        # Set provider options\n        provider_field = \"02_embedding_generation_provider\"\n        template[provider_field][\"options\"] = list(vectorize_providers.keys())\n\n        # Add metadata for each provider option\n        template[provider_field][\"options_metadata\"] = [\n            {\"icon\": self.get_provider_icon(provider_name=provider)} for provider in template[provider_field][\"options\"]\n        ]\n\n        # Get selected embedding provider\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure embedding model field\n        model_field = \"03_embedding_generation_model\"\n        template[model_field].update(\n            {\n                \"options\": vectorize_providers.get(embedding_provider, [[], []])[1],\n                \"placeholder\": \"Bring your own\" if is_bring_your_own else None,\n                \"readonly\": is_bring_your_own,\n                \"required\": not is_bring_your_own,\n                \"value\": None,\n            }\n        )\n\n        # If this is a bring your own, set dimensions to 0\n        return self.reset_dimension_field(build_config)\n\n    def reset_dimension_field(self, build_config: dict) -> dict:\n        \"\"\"Reset dimension field options based on provided configuration.\"\"\"\n        # Extract template path for cleaner access\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n\n        # Get selected embedding model\n        provider_field = \"02_embedding_generation_provider\"\n        embedding_provider = template[provider_field][\"value\"]\n        is_bring_your_own = embedding_provider and embedding_provider == \"Bring your own\"\n\n        # Configure dimension field\n        dimension_field = \"04_dimension\"\n        dimension_value = 1024 if not is_bring_your_own else None  # TODO: Dynamically figure this out\n        template[dimension_field].update(\n            {\n                \"placeholder\": dimension_value,\n                \"value\": dimension_value,\n                \"readonly\": not is_bring_your_own,\n                \"required\": is_bring_your_own,\n            }\n        )\n\n        return build_config\n\n    def reset_collection_list(self, build_config: dict) -> dict:\n        \"\"\"Reset collection list options based on provided configuration.\"\"\"\n        # Get collection options\n        collection_options = self._initialize_collection_options(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        # Update collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update(\n            {\n                \"options\": [col[\"name\"] for col in collection_options],\n                \"options_metadata\": [{k: v for k, v in col.items() if k != \"name\"} for col in collection_options],\n            }\n        )\n\n        # Reset selected collection if not in options\n        if collection_config[\"value\"] not in collection_config[\"options\"]:\n            collection_config[\"value\"] = \"\"\n\n        # Set advanced status based on database selection\n        collection_config[\"show\"] = bool(build_config[\"database_name\"][\"value\"])\n\n        return build_config\n\n    def reset_database_list(self, build_config: dict) -> dict:\n        \"\"\"Reset database list options and related configurations.\"\"\"\n        # Get database options\n        database_options = self._initialize_database_options()\n\n        # Update cloud provider options\n        env = self.environment\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_cloud_provider\"][\"options\"] = list(self.map_cloud_providers()[env].keys())\n\n        # Update database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update(\n            {\n                \"options\": [db[\"name\"] for db in database_options],\n                \"options_metadata\": [{k: v for k, v in db.items() if k != \"name\"} for db in database_options],\n            }\n        )\n\n        # Reset selections if value not in options\n        if database_config[\"value\"] not in database_config[\"options\"]:\n            database_config[\"value\"] = \"\"\n            build_config[\"api_endpoint\"][\"value\"] = \"\"\n            build_config[\"collection_name\"][\"show\"] = False\n\n        # Set advanced status based on token presence\n        database_config[\"show\"] = bool(build_config[\"token\"][\"value\"])\n\n        return build_config\n\n    def reset_build_config(self, build_config: dict) -> dict:\n        \"\"\"Reset all build configuration options to default empty state.\"\"\"\n        # Reset database configuration\n        database_config = build_config[\"database_name\"]\n        database_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n        build_config[\"api_endpoint\"][\"value\"] = \"\"\n\n        # Reset collection configuration\n        collection_config = build_config[\"collection_name\"]\n        collection_config.update({\"options\": [], \"options_metadata\": [], \"value\": \"\", \"show\": False})\n\n        return build_config\n\n    def _handle_hybrid_search_options(self, build_config: dict) -> dict:\n        \"\"\"Set hybrid search options in the build configuration.\"\"\"\n        # Detect what hybrid options are available\n        # Get the admin object\n        client = DataAPIClient(environment=self.environment)\n        admin_client = client.get_admin()\n        db_admin = admin_client.get_database_admin(self.get_api_endpoint(), token=self.token)\n\n        # We will try to get the reranking providers to see if its hybrid emabled\n        try:\n            providers = db_admin.find_reranking_providers()\n            build_config[\"reranker\"][\"options\"] = [\n                model.name for provider_data in providers.reranking_providers.values() for model in provider_data.models\n            ]\n            build_config[\"reranker\"][\"options_metadata\"] = [\n                {\"icon\": self.get_provider_icon(provider_name=model.name.split(\"/\")[0])}\n                for provider in providers.reranking_providers.values()\n                for model in provider.models\n            ]\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Set the default search field to hybrid search\n            build_config[\"search_method\"][\"show\"] = True\n            build_config[\"search_method\"][\"options\"] = [\"Hybrid Search\", \"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Hybrid Search\"\n        except Exception as _:  # noqa: BLE001\n            build_config[\"reranker\"][\"options\"] = []\n            build_config[\"reranker\"][\"options_metadata\"] = []\n\n            # Set the default search field to vector search\n            build_config[\"search_method\"][\"show\"] = False\n            build_config[\"search_method\"][\"options\"] = [\"Vector Search\"]\n            build_config[\"search_method\"][\"value\"] = \"Vector Search\"\n\n        # Set reranker and lexical terms options based on search method\n        build_config[\"reranker\"][\"toggle_value\"] = True\n        build_config[\"reranker\"][\"show\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        build_config[\"reranker\"][\"toggle_disable\"] = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n        if build_config[\"reranker\"][\"show\"]:\n            build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update build configuration based on field name and value.\"\"\"\n        # Early return if no token provided\n        if not self.token:\n            return self.reset_build_config(build_config)\n\n        # Database creation callback\n        if field_name == \"database_name\" and isinstance(field_value, dict):\n            if \"01_new_database_name\" in field_value:\n                await self._create_new_database(build_config, field_value)\n                return self.reset_collection_list(build_config)\n            return self._update_cloud_regions(build_config, field_value)\n\n        # Collection creation callback\n        if field_name == \"collection_name\" and isinstance(field_value, dict):\n            # Case 1: New collection creation\n            if \"01_new_collection_name\" in field_value:\n                await self._create_new_collection(build_config, field_value)\n                return build_config\n\n            # Case 2: Update embedding provider options\n            if \"02_embedding_generation_provider\" in field_value:\n                return self.reset_provider_options(build_config)\n\n            # Case 3: Update dimension field\n            if \"03_embedding_generation_model\" in field_value:\n                return self.reset_dimension_field(build_config)\n\n        # Initial execution or token/environment change\n        first_run = field_name == \"collection_name\" and not field_value and not build_config[\"database_name\"][\"options\"]\n        if first_run or field_name in {\"token\", \"environment\"}:\n            return self.reset_database_list(build_config)\n\n        # Database selection change\n        if field_name == \"database_name\" and not isinstance(field_value, dict):\n            return self._handle_database_selection(build_config, field_value)\n\n        # Keyspace selection change\n        if field_name == \"keyspace\":\n            return self.reset_collection_list(build_config)\n\n        # Collection selection change\n        if field_name == \"collection_name\" and not isinstance(field_value, dict):\n            return self._handle_collection_selection(build_config, field_value)\n\n        # Search method selection change\n        if field_name == \"search_method\":\n            is_vector_search = field_value == \"Vector Search\"\n            is_autodetect = build_config[\"autodetect_collection\"][\"value\"]\n\n            # Configure lexical terms (same for both cases)\n            build_config[\"lexical_terms\"][\"show\"] = not is_vector_search\n            build_config[\"lexical_terms\"][\"value\"] = \"\" if is_vector_search else build_config[\"lexical_terms\"][\"value\"]\n\n            # Disable reranker disabling if hybrid search is selected\n            build_config[\"reranker\"][\"toggle_disable\"] = not is_vector_search\n            build_config[\"reranker\"][\"toggle_value\"] = True\n            build_config[\"reranker\"][\"value\"] = build_config[\"reranker\"][\"options\"][0]\n\n            # Toggle search type and score threshold based on search method\n            build_config[\"search_type\"][\"show\"] = is_vector_search\n            build_config[\"search_score_threshold\"][\"show\"] = is_vector_search\n\n            # Make sure the search_type is set to \"Similarity\"\n            if not is_vector_search or is_autodetect:\n                build_config[\"search_type\"][\"value\"] = \"Similarity\"\n\n        return build_config\n\n    async def _create_new_database(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new database and update build config options.\"\"\"\n        try:\n            await self.create_database_api(\n                new_database_name=field_value[\"01_new_database_name\"],\n                token=self.token,\n                keyspace=self.get_keyspace(),\n                environment=self.environment,\n                cloud_provider=field_value[\"02_cloud_provider\"],\n                region=field_value[\"03_region\"],\n            )\n        except Exception as e:\n            msg = f\"Error creating database: {e}\"\n            raise ValueError(msg) from e\n\n        build_config[\"database_name\"][\"options\"].append(field_value[\"01_new_database_name\"])\n        build_config[\"database_name\"][\"options_metadata\"].append(\n            {\n                \"status\": \"PENDING\",\n                \"collections\": 0,\n                \"api_endpoint\": None,\n                \"keyspaces\": [self.get_keyspace()],\n                \"org_id\": None,\n            }\n        )\n\n    def _update_cloud_regions(self, build_config: dict, field_value: dict) -> dict:\n        \"\"\"Update cloud provider regions in build config.\"\"\"\n        env = self.environment\n        cloud_provider = field_value[\"02_cloud_provider\"]\n\n        # Update the region options based on the selected cloud provider\n        template = build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"03_region\"][\"options\"] = self.map_cloud_providers()[env][cloud_provider][\"regions\"]\n\n        # Reset the the 03_region value if it's not in the new options\n        if template[\"03_region\"][\"value\"] not in template[\"03_region\"][\"options\"]:\n            template[\"03_region\"][\"value\"] = None\n\n        return build_config\n\n    async def _create_new_collection(self, build_config: dict, field_value: dict) -> None:\n        \"\"\"Create a new collection and update build config options.\"\"\"\n        embedding_provider = field_value.get(\"02_embedding_generation_provider\")\n        try:\n            await self.create_collection_api(\n                new_collection_name=field_value[\"01_new_collection_name\"],\n                token=self.token,\n                api_endpoint=build_config[\"api_endpoint\"][\"value\"],\n                environment=self.environment,\n                keyspace=self.get_keyspace(),\n                dimension=field_value.get(\"04_dimension\") if embedding_provider == \"Bring your own\" else None,\n                embedding_generation_provider=embedding_provider,\n                embedding_generation_model=field_value.get(\"03_embedding_generation_model\"),\n                reranker=self.reranker,\n            )\n        except Exception as e:\n            msg = f\"Error creating collection: {e}\"\n            raise ValueError(msg) from e\n\n        provider = embedding_provider.lower() if embedding_provider and embedding_provider != \"Bring your own\" else None\n        build_config[\"collection_name\"].update(\n            {\n                \"value\": field_value[\"01_new_collection_name\"],\n                \"options\": build_config[\"collection_name\"][\"options\"] + [field_value[\"01_new_collection_name\"]],\n            }\n        )\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n        build_config[\"collection_name\"][\"options_metadata\"].append(\n            {\n                \"records\": 0,\n                \"provider\": provider,\n                \"icon\": self.get_provider_icon(provider_name=provider),\n                \"model\": field_value.get(\"03_embedding_generation_model\"),\n            }\n        )\n\n        # Make sure we always show the reranker options if the collection is hybrid enabled\n        # And right now they always are\n        build_config[\"lexical_terms\"][\"show\"] = True\n\n    def _handle_database_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle database selection and update related configurations.\"\"\"\n        build_config = self.reset_database_list(build_config)\n\n        # Reset collection list if database selection changes\n        if field_value not in build_config[\"database_name\"][\"options\"]:\n            build_config[\"database_name\"][\"value\"] = \"\"\n            return build_config\n\n        # Get the api endpoint for the selected database\n        index = build_config[\"database_name\"][\"options\"].index(field_value)\n        build_config[\"api_endpoint\"][\"value\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"api_endpoint\"]\n\n        # Get the org_id for the selected database\n        org_id = build_config[\"database_name\"][\"options_metadata\"][index][\"org_id\"]\n        if not org_id:\n            return build_config\n\n        # Update the list of keyspaces based on the db info\n        build_config[\"keyspace\"][\"options\"] = build_config[\"database_name\"][\"options_metadata\"][index][\"keyspaces\"]\n        build_config[\"keyspace\"][\"value\"] = (\n            build_config[\"keyspace\"][\"options\"] and build_config[\"keyspace\"][\"options\"][0]\n            if build_config[\"keyspace\"][\"value\"] not in build_config[\"keyspace\"][\"options\"]\n            else build_config[\"keyspace\"][\"value\"]\n        )\n\n        # Get the database id for the selected database\n        db_id = self.get_database_id_static(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        keyspace = self.get_keyspace()\n\n        # Update the helper text for the embedding provider field\n        template = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"]\n        template[\"02_embedding_generation_provider\"][\"helper_text\"] = (\n            \"To create collections with more embedding provider options, go to \"\n            f'<a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" '\n            f'href=\"https://astra.datastax.com/org/{org_id}/database/{db_id}/data-explorer?createCollection=1&namespace={keyspace}\">'\n            \"your database in Astra DB</a>.\"\n        )\n\n        # Reset provider options\n        build_config = self.reset_provider_options(build_config)\n\n        # Handle hybrid search options\n        build_config = self._handle_hybrid_search_options(build_config)\n\n        return self.reset_collection_list(build_config)\n\n    def _handle_collection_selection(self, build_config: dict, field_value: str) -> dict:\n        \"\"\"Handle collection selection and update embedding options.\"\"\"\n        build_config[\"autodetect_collection\"][\"value\"] = True\n        build_config = self.reset_collection_list(build_config)\n\n        # Reset embedding model if collection selection changes\n        if field_value and field_value not in build_config[\"collection_name\"][\"options\"]:\n            build_config[\"collection_name\"][\"options\"].append(field_value)\n            build_config[\"collection_name\"][\"options_metadata\"].append(\n                {\n                    \"records\": 0,\n                    \"provider\": None,\n                    \"icon\": \"vectorstores\",\n                    \"model\": None,\n                }\n            )\n            build_config[\"autodetect_collection\"][\"value\"] = False\n\n        if not field_value:\n            return build_config\n\n        # Get the selected collection index\n        index = build_config[\"collection_name\"][\"options\"].index(field_value)\n\n        # Set the provider of the selected collection\n        provider = build_config[\"collection_name\"][\"options_metadata\"][index][\"provider\"]\n        build_config[\"embedding_model\"][\"show\"] = not bool(provider)\n        build_config[\"embedding_model\"][\"required\"] = not bool(provider)\n\n        # Grab the collection object\n        database = self.get_database_object(api_endpoint=build_config[\"api_endpoint\"][\"value\"])\n        collection = database.get_collection(\n            name=field_value,\n            keyspace=build_config[\"keyspace\"][\"value\"],\n        )\n\n        # Check if hybrid and lexical are enabled\n        col_options = collection.options()\n        hyb_enabled = col_options.rerank and col_options.rerank.enabled\n        lex_enabled = col_options.lexical and col_options.lexical.enabled\n        user_hyb_enabled = build_config[\"search_method\"][\"value\"] == \"Hybrid Search\"\n\n        # Show lexical terms if the collection is hybrid enabled\n        build_config[\"lexical_terms\"][\"show\"] = hyb_enabled and lex_enabled and user_hyb_enabled\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = {\"embedding\": self.embedding_model} if self.embedding_model else {}\n\n        # Get the additional parameters\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Langflow version and platform information\n        __version__ = get_version_info()[\"version\"]\n        langflow_prefix = \"\"\n        # if os.getenv(\"AWS_EXECUTION_ENV\") == \"AWS_ECS_FARGATE\":  # TODO: More precise way of detecting\n        #     langflow_prefix = \"ds-\"\n\n        # Get the database object\n        database = self.get_database_object()\n        autodetect = self.collection_name in database.list_collection_names() and self.autodetect_collection\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": autodetect,\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params\n                    and self.collection_data(collection_name=self.collection_name, database=database) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Choose HybridSearchMode based on the selected param\n        hybrid_search_mode = HybridSearchMode.DEFAULT if self.search_method == \"Hybrid Search\" else HybridSearchMode.OFF\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=database.api_endpoint,\n                namespace=database.keyspace,\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Hybrid Search Parameters\n                hybrid_search=hybrid_search_mode,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{langflow_prefix}langflow\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        # Add documents to the vector store\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        self.ingest_data = self._prepare_ingest_data()\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=database.keyspace)\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        # Clean up the search query\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n        lexical_terms = self.lexical_terms or None\n\n        # Check if we have a search query, and if so set the args\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n                \"lexical_query\": lexical_terms,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n        self.log(f\"store.hybrid_search: {vector_store.hybrid_search}\")\n        self.log(f\"Lexical terms: {self.lexical_terms}\")\n        self.log(f\"Reranker: {self.reranker}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
              },
              "collection_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several seconds for creation to complete.",
                        "display_name": "Create new collection",
                        "field_order": [
                          "01_new_collection_name",
                          "02_embedding_generation_provider",
                          "03_embedding_generation_model",
                          "04_dimension"
                        ],
                        "name": "create_collection",
                        "template": {
                          "01_new_collection_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new collection to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_collection_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_embedding_generation_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding generation method",
                            "dynamic": false,
                            "helper_text": "To create collections with more embedding provider options, go to <a class=\"underline\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://astra.datastax.com/org/19f3ca42-5972-47ae-8853-627885ad357f/database/184938ef-71ea-49ca-b3ba-28452e797e1e/data-explorer?createCollection=1&namespace=default_keyspace\">your database in Astra DB</a>.",
                            "info": "Provider to use for generating embeddings.",
                            "name": "embedding_generation_provider",
                            "options": [
                              "Bring your own",
                              "Nvidia"
                            ],
                            "options_metadata": [
                              {
                                "icon": "vectorstores"
                              },
                              {
                                "icon": "NVIDIA"
                              }
                            ],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_embedding_generation_model": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Embedding model",
                            "dynamic": false,
                            "info": "Model to use for generating embeddings.",
                            "name": "embedding_generation_model",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": null,
                            "readonly": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": null
                          },
                          "04_dimension": {
                            "_input_type": "IntInput",
                            "advanced": false,
                            "display_name": "Dimensions",
                            "dynamic": false,
                            "info": "Dimensions of the embeddings to generate.",
                            "list": false,
                            "list_add_label": "Add More",
                            "name": "dimension",
                            "placeholder": 1024,
                            "readonly": true,
                            "required": "",
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "int",
                            "value": 1024
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Collection",
                "dynamic": false,
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "name": "collection_name",
                "options": [
                  "text_embeddings",
                  "text_embeddings_2",
                  "text_embeddings_3",
                  "ve_1",
                  "ve_2",
                  "video_embeddings",
                  "video_embeddings_2",
                  "video_embeddings_4",
                  "video_embeddings_5",
                  "video_embeddings_6",
                  "video_embeddings_7"
                ],
                "options_metadata": [
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 3
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 2
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 0
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 23
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 2
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 295
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 12
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 12
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 19
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 0
                  },
                  {
                    "icon": "vectorstores",
                    "model": null,
                    "provider": null,
                    "records": 11
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "video_embeddings"
              },
              "content_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Content Field",
                "dynamic": false,
                "info": "Field to use as the text content field for the vector store.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "content_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "database_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {
                  "fields": {
                    "data": {
                      "node": {
                        "description": "Please allow several minutes for creation to complete.",
                        "display_name": "Create new database",
                        "field_order": [
                          "01_new_database_name",
                          "02_cloud_provider",
                          "03_region"
                        ],
                        "name": "create_database",
                        "template": {
                          "01_new_database_name": {
                            "_input_type": "StrInput",
                            "advanced": false,
                            "display_name": "Name",
                            "dynamic": false,
                            "info": "Name of the new database to create in Astra DB.",
                            "list": false,
                            "list_add_label": "Add More",
                            "load_from_db": false,
                            "name": "new_database_name",
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "02_cloud_provider": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Cloud provider",
                            "dynamic": false,
                            "info": "Cloud provider for the new database.",
                            "name": "cloud_provider",
                            "options": [
                              "Amazon Web Services",
                              "Google Cloud Platform",
                              "Microsoft Azure"
                            ],
                            "options_metadata": [],
                            "placeholder": "",
                            "real_time_refresh": true,
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          },
                          "03_region": {
                            "_input_type": "DropdownInput",
                            "advanced": false,
                            "combobox": false,
                            "dialog_inputs": {},
                            "display_name": "Region",
                            "dynamic": false,
                            "info": "Region for the new database.",
                            "name": "region",
                            "options": [],
                            "options_metadata": [],
                            "placeholder": "",
                            "required": true,
                            "show": true,
                            "title_case": false,
                            "toggle": false,
                            "tool_mode": false,
                            "trace_as_metadata": true,
                            "type": "str",
                            "value": ""
                          }
                        }
                      }
                    }
                  },
                  "functionality": "create"
                },
                "display_name": "Database",
                "dynamic": false,
                "info": "The Database name for the Astra DB instance.",
                "name": "database_name",
                "options": [
                  "video_embeddings"
                ],
                "options_metadata": [
                  {
                    "api_endpoint": "https://184938ef-71ea-49ca-b3ba-28452e797e1e-us-east-2.apps.astra.datastax.com",
                    "collections": 11,
                    "keyspaces": [
                      "default_keyspace"
                    ],
                    "org_id": "19f3ca42-5972-47ae-8853-627885ad357f",
                    "status": "MAINTENANCE"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "refresh_button": true,
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "video_embeddings"
              },
              "deletion_field": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Deletion Based On Field",
                "dynamic": false,
                "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "deletion_field",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "embedding_model": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding Model",
                "dynamic": false,
                "info": "Specify the Embedding Model. Not required for Astra Vectorize collections.",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding_model",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "environment": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Environment",
                "dynamic": false,
                "info": "The environment for the Astra DB API Endpoint.",
                "name": "environment",
                "options": [
                  "prod",
                  "test",
                  "dev"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "prod"
              },
              "ignore_invalid_documents": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Invalid Documents",
                "dynamic": false,
                "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_invalid_documents",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "keyspace": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Keyspace",
                "dynamic": false,
                "info": "Optional keyspace within Astra DB to use for the collection.",
                "name": "keyspace",
                "options": [
                  "default_keyspace"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "default_keyspace"
              },
              "lexical_terms": {
                "_input_type": "QueryInput",
                "advanced": true,
                "display_name": "Lexical Terms",
                "dynamic": false,
                "info": "Add additional terms/keywords to augment search precision.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "lexical_terms",
                "placeholder": "Enter terms to search...",
                "required": false,
                "separator": " ",
                "show": false,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Search Results",
                "dynamic": false,
                "info": "Number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 4
              },
              "reranker": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Reranker",
                "dynamic": false,
                "info": "Post-retrieval model that re-scores results for optimal relevance ranking.",
                "name": "reranker",
                "options": [
                  "nvidia/llama-3.2-nv-rerankqa-1b-v2"
                ],
                "options_metadata": [
                  {
                    "icon": "NVIDIA"
                  }
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": true,
                "toggle_disable": true,
                "toggle_value": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "nvidia/llama-3.2-nv-rerankqa-1b-v2"
              },
              "search_method": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Method",
                "dynamic": false,
                "info": "Determine how your content is matched: Vector finds semantic similarity, and Hybrid Search (suggested) combines both approaches with a reranker.",
                "name": "search_method",
                "options": [
                  "Hybrid Search",
                  "Vector Search"
                ],
                "options_metadata": [
                  {
                    "icon": "SearchHybrid"
                  },
                  {
                    "icon": "SearchVector"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Hybrid Search"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "search_score_threshold": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Search Score Threshold",
                "dynamic": false,
                "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                "list": false,
                "list_add_label": "Add More",
                "name": "search_score_threshold",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": 0
              },
              "search_type": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Type",
                "dynamic": false,
                "info": "Search type to use",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "Similarity with score threshold",
                  "MMR (Max Marginal Relevance)"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity"
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "token": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Astra DB Application Token",
                "dynamic": false,
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [],
                "load_from_db": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "AstraDB"
        },
        "dragging": false,
        "id": "AstraDB-m6bmc",
        "measured": {
          "height": 675,
          "width": 320
        },
        "position": {
          "x": -149.935292083002,
          "y": 837.556529733794
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Chat with videos using Twelve Labs Pegasus API.",
          "display_name": "Twelve Labs Pegasus",
          "id": "TwelveLabsPegasus-tMPRE",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Chat with videos using Twelve Labs Pegasus API.",
            "display_name": "Twelve Labs Pegasus",
            "documentation": "",
            "edited": false,
            "field_order": [
              "videodata",
              "api_key",
              "video_id",
              "index_name",
              "index_id",
              "model_name",
              "message",
              "temperature"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "process_video",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Video ID",
                "method": "get_video_id",
                "name": "processed_video_id",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Twelve Labs API Key",
                "dynamic": false,
                "info": "Enter your Twelve Labs API Key.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DataInput, SecretStrInput, MessageInput, MultilineInput, SliderInput, DropdownInput\nfrom langflow.io import Output\nfrom langflow.schema.message import Message\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom typing import Dict, Any, Tuple\nfrom twelvelabs import TwelveLabs\nimport time\nimport os\nimport subprocess\nimport json\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nclass TwelveLabsPegasus(Component):\n    display_name = \"Twelve Labs Pegasus\"\n    description = \"Chat with videos using Twelve Labs Pegasus API.\"\n    icon = \"TwelveLabs\"\n    name = \"TwelveLabsPegasus\"\n\n    inputs = [\n        DataInput(\n            name=\"videodata\", \n            display_name=\"Video Data\", \n            info=\"Video Data\",\n            is_list=True\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Twelve Labs API Key\",\n            info=\"Enter your Twelve Labs API Key.\",\n            required=True\n        ),\n        MessageInput(\n            name=\"video_id\",\n            display_name=\"Pegasus Video ID\",\n            info=\"Enter a Video ID for a previously indexed video.\",\n        ),\n        MessageInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            info=\"Name of the index to use. If the index doesn't exist, it will be created.\",\n            required=False\n        ),\n        MessageInput(\n            name=\"index_id\",\n            display_name=\"Index ID\",\n            info=\"ID of an existing index to use. If provided, index_name will be ignored.\",\n            required=False\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"Pegasus model to use for indexing\",\n            options=[\"pegasus1.2\"],\n            value=\"pegasus1.2\",\n            advanced=False,\n        ),\n        MultilineInput(\n            name=\"message\",\n            display_name=\"Prompt\",\n            info=\"Message to chat with the video.\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.7,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            info=\"Controls randomness in responses. Lower values are more deterministic, higher values are more creative.\",\n        )\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"response\",\n            method=\"process_video\",\n            type_=Message,\n        ),\n        Output(\n            display_name=\"Video ID\",\n            name=\"processed_video_id\",\n            method=\"get_video_id\",\n            type_=Message,\n        ),\n    ]\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self._task_id = None\n\n        self._video_id = None\n        self._index_id = None\n        self._index_name = None\n        self._message = None\n\n\n    def _get_or_create_index(self, client: TwelveLabs) -> Tuple[str, str]:\n        \"\"\"Get existing index or create new one. Returns (index_id, index_name)\"\"\"     \n\n        # First check if index_id is provided and valid\n        if hasattr(self, '_index_id') and self._index_id:\n\n            try:\n                index = client.index.retrieve(id=self._index_id)\n                self.log(f\"Found existing index with ID: {self._index_id}\")\n                return self._index_id, index.name\n            except Exception as e:\n                self.log(f\"Error retrieving index with ID {self._index_id}: {str(e)}\", \"WARNING\")\n\n        # If index_name is provided, try to find it\n        if hasattr(self, '_index_name') and self._index_name:\n            \n            try:\n                # List all indexes and find by name\n                indexes = client.index.list()\n                for idx in indexes:\n                    if idx.name == self._index_name:\n                        self.log(f\"Found existing index: {self._index_name} (ID: {idx.id})\")\n                        return idx.id, idx.name\n                \n                # If we get here, index wasn't found - create it\n                self.log(f\"Creating new index: { self._index_name}\")\n                index = client.index.create(\n                    name= self._index_name,\n                    models=[\n                        {\n                            \"name\": self.model_name if hasattr(self, 'model_name') else \"pegasus1.2\",\n                            \"options\": [\"visual\",\"audio\"]\n                        }\n                    ]\n                )\n                return index.id, index.name\n            except Exception as e:\n                self.log(f\"Error with index name { self._index_name}: {str(e)}\", \"ERROR\")\n                raise\n\n        # If neither is provided, create a new index with timestamp\n        try:\n            index_name = f\"index_{int(time.time())}\"\n            self.log(f\"Creating new index: {index_name}\")\n            index = client.index.create(\n                name=index_name,\n                models=[\n                    {\n                        \"name\": self.model_name if hasattr(self, 'model_name') else \"pegasus1.2\",\n                        \"options\": [\"visual\",\"audio\"]\n                    }\n                ]\n            )\n            return index.id, index.name\n        except Exception as e:\n            self.log(f\"Failed to create new index: {str(e)}\", \"ERROR\")\n            raise\n\n    @retry(\n        stop=stop_after_attempt(3),\n        wait=wait_exponential(multiplier=1, min=4, max=10),\n        reraise=True\n    )\n    async def _make_api_request(self, client, method, *args, **kwargs):\n        \"\"\"Make API request with retry logic\"\"\"\n        try:\n            return await method(*args, **kwargs)\n        except Exception as e:\n            self.log(f\"API request failed: {str(e)}\", \"ERROR\")\n            raise\n\n    def wait_for_task_completion(\n        self, \n        client: TwelveLabs, \n        task_id: str, \n        max_retries: int = 120,\n        sleep_time: int = 5\n    ) -> Dict[str, Any]:\n        \"\"\"Wait for task completion with timeout and improved error handling\"\"\"\n        retries = 0\n        consecutive_errors = 0\n        max_consecutive_errors = 3\n        \n        while retries < max_retries:\n            try:\n                self.log(\"Checking task status (attempt {})\".format(retries + 1))\n                result = client.task.retrieve(id=task_id)\n                consecutive_errors = 0  # Reset error counter on success\n                \n                if result.status == \"ready\":\n                    self.log(\"Task completed successfully!\")\n                    return result\n                elif result.status == \"failed\":\n                    error_msg = f\"Task failed with status: {result.status}\"\n                    self.log(error_msg, \"ERROR\")\n                    raise Exception(error_msg)\n                elif result.status == \"error\":\n                    error_msg = f\"Task encountered an error: {getattr(result, 'error', 'Unknown error')}\"\n                    self.log(error_msg, \"ERROR\")\n                    raise Exception(error_msg)\n                \n                time.sleep(sleep_time)\n                retries += 1\n                status_msg = f\"Processing video... {retries * sleep_time}s elapsed\"\n                self.status = status_msg\n                self.log(status_msg)\n                \n            except Exception as e:\n                consecutive_errors += 1\n                error_msg = f\"Error checking task status: {str(e)}\"\n                self.log(error_msg, \"WARNING\")\n                \n                if consecutive_errors >= max_consecutive_errors:\n                    raise Exception(f\"Too many consecutive errors: {error_msg}\")\n                \n                time.sleep(sleep_time * 2)\n                continue\n        \n        timeout_msg = f\"Timeout after {max_retries * sleep_time} seconds\"\n        self.log(timeout_msg, \"ERROR\")\n        raise Exception(timeout_msg)\n\n    def validate_video_file(self, filepath: str) -> tuple[bool, str]:\n        \"\"\"\n        Validate video file using ffprobe.\n        Returns (is_valid, error_message)\n        \"\"\"\n        try:\n            cmd = [\n                'ffprobe',\n                '-loglevel', 'error',\n                '-show_entries', 'stream=codec_type,codec_name',\n                '-of', 'default=nw=1',\n                '-print_format', 'json',\n                '-show_format',\n                filepath\n            ]\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            \n            if result.returncode != 0:\n                return False, f\"FFprobe error: {result.stderr}\"\n            \n            probe_data = json.loads(result.stdout)\n            \n            has_video = any(\n                stream.get('codec_type') == 'video' \n                for stream in probe_data.get('streams', [])\n            )\n            \n            if not has_video:\n                return False, \"No video stream found in file\"\n                \n            self.log(f\"Video validation successful: {json.dumps(probe_data, indent=2)}\")\n            return True, \"\"\n            \n        except subprocess.SubprocessError as e:\n            return False, f\"FFprobe process error: {str(e)}\"\n        except json.JSONDecodeError as e:\n            return False, f\"FFprobe output parsing error: {str(e)}\"\n        except Exception as e:\n            return False, f\"Validation error: {str(e)}\"\n\n    def on_task_update(self, task):\n        \"\"\"Callback for task status updates\"\"\"\n        self.status = f\"Processing video... Status: {task.status}\"\n        self.log(self.status)\n\n    def process_video(self) -> Message:\n        \"\"\"Process video using Pegasus and generate response if message is provided\"\"\"\n        # Check and initialize inputs\n        if hasattr(self, 'index_id') and self.index_id:\n            self._index_id = self.index_id.text if hasattr(self.index_id, 'text') else self.index_id\n\n        if hasattr(self, 'index_name') and self.index_name:\n            self._index_name = self.index_name.text if hasattr(self.index_name, 'text') else self.index_name\n\n        if hasattr(self, 'video_id') and self.video_id:\n            self._video_id = self.video_id.text if hasattr(self.video_id, 'text') else self.video_id\n\n        if hasattr(self, 'message') and self.message:\n            self._message = self.message.text if hasattr(self.message, 'text') else self.message\n\n        try:\n            # If we have a message and already processed video, use existing video_id\n            if self._message and self._video_id and self._video_id != \"\":\n                self.status = f\"Have video id: {self._video_id}\"\n                \n                client = TwelveLabs(api_key=self.api_key)\n                \n                self.status = f\"Processing query (w/ video ID): {self._video_id} {self._message}\"\n                self.log(self.status)\n                \n                response = client.generate.text(\n                    video_id=self._video_id,\n                    prompt=self._message,\n                    temperature=self.temperature,\n                )\n                return Message(text=response.data)\n\n            # Otherwise process new video\n            if not self.videodata or not isinstance(self.videodata, list) or len(self.videodata) != 1:\n                return Message(text=\"Please provide exactly one video\")\n\n            video_path = self.videodata[0].data.get('text')\n            if not video_path or not os.path.exists(video_path):\n                return Message(text=\"Invalid video path\")\n\n            if not self.api_key:\n                return Message(text=\"No API key provided\")\n\n            client = TwelveLabs(api_key=self.api_key)\n\n            # Get or create index\n            try:\n                index_id, index_name = self._get_or_create_index(client)\n                self.status = f\"Using index: {index_name} (ID: {index_id})\"\n                self.log(f\"Using index: {index_name} (ID: {index_id})\")\n                self._index_id = index_id\n                self._index_name = index_name\n            except Exception as e:\n                return Message(text=f\"Failed to get/create index: {str(e)}\")\n\n            with open(video_path, 'rb') as video_file:\n                task = client.task.create(\n                    index_id=self._index_id,\n                    file=video_file\n                )\n            self._task_id = task.id\n\n            # Wait for processing to complete\n            task.wait_for_done(sleep_interval=5, callback=self.on_task_update)\n            \n            if task.status != \"ready\":\n                return Message(text=f\"Processing failed with status {task.status}\")\n\n            # Store video_id for future use\n            self._video_id = task.video_id\n\n            # Generate response if message provided\n            if self._message:\n                \n                self.status = f\"Processing query: {self._message}\"\n                self.log(self.status)\n\n                response = client.generate.text(\n                    video_id=self._video_id,\n                    prompt=self._message,\n                    temperature=self.temperature,\n                )\n                return Message(text=response.data)\n            else:\n                return Message(text=f\"Video processed successfully. You can now ask questions about the video. Video ID: {self._video_id}\")\n\n        except Exception as e:\n            self.log(f\"Error: {str(e)}\", \"ERROR\")\n            # Clear stored IDs on error\n            self._video_id = None\n            self._index_id = None\n            self._task_id = None\n            return Message(text=f\"Error: {str(e)}\")\n            \n    def get_video_id(self) -> Message:\n        \"\"\"Return the video ID of the processed video as a Message\"\"\"\n        video_id = self._video_id or \"\"\n        return Message(text=video_id)\n"
              },
              "index_id": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Index ID",
                "dynamic": false,
                "info": "ID of an existing index to use. If provided, index_name will be ignored.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "index_name": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "Name of the index to use. If the index doesn't exist, it will be created.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "message": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Prompt",
                "dynamic": false,
                "info": "Message to chat with the video.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "message",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "Pegasus model to use for indexing",
                "name": "model_name",
                "options": [
                  "pegasus1.2"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "pegasus1.2"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in responses. Lower values are more deterministic, higher values are more creative.",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.7
              },
              "video_id": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Pegasus Video ID",
                "dynamic": false,
                "info": "Enter a Video ID for a previously indexed video.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "video_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "videodata": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Video Data",
                "dynamic": false,
                "info": "Video Data",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "videodata",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TwelveLabsPegasus"
        },
        "dragging": false,
        "id": "TwelveLabsPegasus-tMPRE",
        "measured": {
          "height": 839,
          "width": 320
        },
        "position": {
          "x": 722.9135452365651,
          "y": 936.2160054286737
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "SplitVideo-kVqgo",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split a video into multiple clips of specified duration.",
            "display_name": "Split Video",
            "documentation": "",
            "edited": false,
            "field_order": [
              "videodata",
              "clip_duration",
              "last_clip_handling",
              "include_original"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Video Clips",
                "hidden": false,
                "method": "process",
                "name": "clips",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "clip_duration": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Clip Duration (seconds)",
                "dynamic": false,
                "info": "Duration of each clip in seconds",
                "list": false,
                "list_add_label": "Add More",
                "name": "clip_duration",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 6
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import BoolInput, IntInput, HandleInput, DropdownInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\nimport os\nimport subprocess\nfrom typing import List\nfrom datetime import datetime\nimport hashlib\nimport math\n\nclass SplitVideoComponent(Component):\n    \"\"\"A component that splits a video into multiple clips of specified duration using FFmpeg.\"\"\"\n\n    display_name = \"Split Video\"\n    description = \"Split a video into multiple clips of specified duration.\"\n    icon = \"TwelveLabs\"\n    name = \"SplitVideo\"\n\n    inputs = [\n        HandleInput(\n            name=\"videodata\",\n            display_name=\"Video Data\",\n            info=\"Input video data from VideoFile component\",\n            required=True,\n            input_types=[\"Data\"],\n        ),\n        IntInput(\n            name=\"clip_duration\",\n            display_name=\"Clip Duration (seconds)\",\n            info=\"Duration of each clip in seconds\",\n            required=True,\n            value=30,\n        ),\n        DropdownInput(\n            name=\"last_clip_handling\",\n            display_name=\"Last Clip Handling\",\n            info=(\n                \"How to handle the final clip when it would be shorter than the specified duration:\\n\"\n                \"- Truncate: Skip the final clip entirely if it's shorter than the specified duration\\n\"\n                \"- Overlap Previous: Start the final clip earlier to maintain full duration, overlapping with previous clip\\n\"\n                \"- Keep Short: Keep the final clip at its natural length, even if shorter than specified duration\"\n            ),\n            options=[\"Truncate\", \"Overlap Previous\", \"Keep Short\"],\n            value=\"Overlap Previous\",\n            required=True,\n        ),\n        BoolInput(\n            name=\"include_original\",\n            display_name=\"Include Original Video\",\n            info=\"Whether to include the original video in the output\",\n            value=False,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            name=\"clips\",\n            display_name=\"Video Clips\",\n            method=\"process\",\n            output_types=[\"Data\"],\n        ),\n    ]\n\n    def get_video_duration(self, video_path: str) -> float:\n        \"\"\"Get video duration using FFmpeg.\"\"\"\n        try:\n            cmd = [\n                'ffprobe',\n                '-v', 'error',\n                '-show_entries', 'format=duration',\n                '-of', 'default=noprint_wrappers=1:nokey=1',\n                video_path\n            ]\n            result = subprocess.run(cmd, capture_output=True, text=True)\n            if result.returncode != 0:\n                raise RuntimeError(f\"FFprobe error: {result.stderr}\")\n            return float(result.stdout.strip())\n        except Exception as e:\n            self.log(f\"Error getting video duration: {str(e)}\", \"ERROR\")\n            raise\n\n    def get_output_dir(self, video_path: str) -> str:\n        \"\"\"Create a unique output directory for clips based on video name and timestamp.\"\"\"\n        # Get the video filename without extension\n        base_name = os.path.splitext(os.path.basename(video_path))[0]\n        \n        # Create a timestamp\n        timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        \n        # Create a unique hash from the video path\n        path_hash = hashlib.md5(video_path.encode()).hexdigest()[:8]\n        \n        # Create the output directory path\n        output_dir = os.path.join(\n            os.path.dirname(video_path),\n            f\"clips_{base_name}_{timestamp}_{path_hash}\"\n        )\n        \n        # Create the directory if it doesn't exist\n        os.makedirs(output_dir, exist_ok=True)\n        \n        return output_dir\n\n    def process_video(self, video_path: str, clip_duration: int, include_original: bool) -> List[Data]:\n        \"\"\"Process video and split it into clips using FFmpeg.\"\"\"\n        try:\n            # Get video duration\n            total_duration = self.get_video_duration(video_path)\n            \n            # Calculate number of clips (ceiling to include partial clip)\n            num_clips = math.ceil(total_duration / clip_duration)\n            self.log(f\"Total duration: {total_duration}s, Clip duration: {clip_duration}s, Number of clips: {num_clips}\")\n            \n            # Create output directory for clips\n            output_dir = self.get_output_dir(video_path)\n            \n            # Get original video info\n            original_filename = os.path.basename(video_path)\n            original_name = os.path.splitext(original_filename)[0]\n            \n            # List to store all video paths (including original if requested)\n            video_paths = []\n            \n            # Add original video if requested\n            if include_original:\n                original_data = {\n                    \"text\": video_path,\n                    \"metadata\": {\n                        \"source\": video_path,\n                        \"type\": \"video\",\n                        \"clip_index\": -1,  # -1 indicates original video\n                        \"duration\": total_duration,\n                        \"original_video\": {\n                            \"name\": original_name,\n                            \"filename\": original_filename,\n                            \"path\": video_path,\n                            \"duration\": total_duration,\n                            \"total_clips\": num_clips,\n                            \"clip_duration\": clip_duration\n                        }\n                    }\n                }\n                video_paths.append(Data(data=original_data))\n            \n            # Split video into clips\n            for i in range(num_clips):\n                start_time = i * clip_duration\n                end_time = min((i + 1) * clip_duration, total_duration)\n                duration = end_time - start_time\n                \n                # Handle last clip if it's shorter\n                if i == num_clips - 1 and duration < clip_duration:\n                    if self.last_clip_handling == \"Truncate\":\n                        # Skip if the last clip would be too short\n                        continue\n                    elif self.last_clip_handling == \"Overlap Previous\" and i > 0:\n                        # Start from earlier to make full duration\n                        start_time = total_duration - clip_duration\n                        duration = clip_duration\n                    # For \"Keep Short\", we use the original start_time and duration\n                \n                # Skip if duration is too small (less than 1 second)\n                if duration < 1:\n                    continue\n                \n                # Generate output path\n                output_path = os.path.join(output_dir, f\"clip_{i:03d}.mp4\")\n                \n                try:\n                    # Use FFmpeg to split the video\n                    cmd = [\n                        'ffmpeg',\n                        '-i', video_path,\n                        '-ss', str(start_time),\n                        '-t', str(duration),\n                        '-c:v', 'libx264',\n                        '-c:a', 'aac',\n                        '-y',  # Overwrite output file if it exists\n                        output_path\n                    ]\n                    \n                    result = subprocess.run(cmd, capture_output=True, text=True)\n                    if result.returncode != 0:\n                        raise RuntimeError(f\"FFmpeg error: {result.stderr}\")\n                    \n                    # Create Data object for the clip\n                    clip_data = {\n                        \"text\": output_path,\n                        \"metadata\": {\n                            \"source\": video_path,\n                            \"type\": \"video\",\n                            \"clip_index\": i,\n                            \"start_time\": start_time,\n                            \"end_time\": end_time,\n                            \"duration\": duration,\n                            \"original_video\": {\n                                \"name\": original_name,\n                                \"filename\": original_filename,\n                                \"path\": video_path,\n                                \"duration\": total_duration,\n                                \"total_clips\": num_clips,\n                                \"clip_duration\": clip_duration\n                            },\n                            \"clip\": {\n                                \"index\": i,\n                                \"total\": num_clips,\n                                \"duration\": duration,\n                                \"start_time\": start_time,\n                                \"end_time\": end_time,\n                                \"timestamp\": f\"{int(start_time//60):02d}:{int(start_time%60):02d} - {int(end_time//60):02d}:{int(end_time%60):02d}\"\n                            }\n                        }\n                    }\n                    video_paths.append(Data(data=clip_data))\n                    \n                except Exception as e:\n                    self.log(f\"Error processing clip {i}: {str(e)}\", \"ERROR\")\n                    raise\n            \n            self.log(f\"Created {len(video_paths)} clips in {output_dir}\")\n            return video_paths\n            \n        except Exception as e:\n            self.log(f\"Error processing video: {str(e)}\", \"ERROR\")\n            raise\n\n    def process(self) -> List[Data]:\n        \"\"\"Process the input video and return a list of Data objects containing the clips.\"\"\"\n        try:\n            # Get the input video path from the previous component\n            if not hasattr(self, 'videodata') or not isinstance(self.videodata, list) or len(self.videodata) != 1:\n                raise ValueError(\"Please provide exactly one video\")\n            \n            video_path = self.videodata[0].data.get('text')\n            if not video_path or not os.path.exists(video_path):\n                raise ValueError(\"Invalid video path\")\n            \n            # Process the video\n            return self.process_video(video_path, self.clip_duration, self.include_original)\n            \n        except Exception as e:\n            self.log(f\"Error in split video component: {str(e)}\", \"ERROR\")\n            raise\n"
              },
              "include_original": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Include Original Video",
                "dynamic": false,
                "info": "Whether to include the original video in the output",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_original",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "last_clip_handling": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Last Clip Handling",
                "dynamic": false,
                "info": "How to handle the final clip when it would be shorter than the specified duration:\n- Truncate: Skip the final clip entirely if it's shorter than the specified duration\n- Overlap Previous: Start the final clip earlier to maintain full duration, overlapping with previous clip\n- Keep Short: Keep the final clip at its natural length, even if shorter than specified duration",
                "name": "last_clip_handling",
                "options": [
                  "Truncate",
                  "Overlap Previous",
                  "Keep Short"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Overlap Previous"
              },
              "videodata": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Video Data",
                "dynamic": false,
                "info": "Input video data from VideoFile component",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "videodata",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SplitVideo"
        },
        "dragging": false,
        "id": "SplitVideo-kVqgo",
        "measured": {
          "height": 417,
          "width": 320
        },
        "position": {
          "x": 2458.192751506522,
          "y": -159.29607960957966
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "VideoFile-SEa6V",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Load a video file in common video formats.",
            "display_name": "Video File",
            "documentation": "",
            "edited": false,
            "field_order": [
              "file_path"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "load_files",
                "name": "data",
                "required_inputs": [
                  "file_path"
                ],
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "DataFrame",
                "method": "load_dataframe",
                "name": "dataframe",
                "required_inputs": [],
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "load_message",
                "name": "message",
                "required_inputs": [],
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.io import FileInput\nfrom langflow.schema import Data\nimport os\n\n\nclass VideoFileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of video files.\n\n    This component supports processing video files in common video formats.\n    \"\"\"\n\n    display_name = \"Video File\"\n    description = \"Load a video file in common video formats.\"\n    icon = \"TwelveLabs\"\n    name = \"VideoFile\"\n\n    VALID_EXTENSIONS = [\n        # Common video formats\n        \"mp4\", \"avi\", \"mov\", \"mkv\", \"webm\", \"flv\", \"wmv\", \n        \"mpg\", \"mpeg\", \"m4v\", \"3gp\", \"3g2\", \"m2v\",\n        # Professional video formats\n        \"mxf\", \"dv\", \"vob\",\n        # Additional video formats\n        \"ogv\", \"rm\", \"rmvb\", \"amv\", \"divx\", \"m2ts\", \"mts\", \"ts\",\n        \"qt\", \"yuv\", \"y4m\"\n    ]\n\n    inputs = [\n        FileInput(\n            display_name=\"Video File\",\n            name=\"file_path\",\n            file_types=[\n                # Common video formats\n                \"mp4\", \"avi\", \"mov\", \"mkv\", \"webm\", \"flv\", \"wmv\", \n                \"mpg\", \"mpeg\", \"m4v\", \"3gp\", \"3g2\", \"m2v\",\n                # Professional video formats\n                \"mxf\", \"dv\", \"vob\",\n                # Additional video formats\n                \"ogv\", \"rm\", \"rmvb\", \"amv\", \"divx\", \"m2ts\", \"mts\", \"ts\",\n                \"qt\", \"yuv\", \"y4m\"\n            ],\n            required=True,\n            info=\"Upload a video file in any common video format supported by ffmpeg\",\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Process video files\"\"\"\n        self.log(f\"DEBUG: Processing video files: {len(file_list)}\")\n        \n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        processed_files = []\n        for file in file_list:\n            try:\n                file_path = str(file.path)\n                self.log(f\"DEBUG: Processing video file: {file_path}\")\n                \n                # Verify file exists\n                if not os.path.exists(file_path):\n                    raise FileNotFoundError(f\"Video file not found: {file_path}\")\n                \n                # Verify extension\n                if not file_path.lower().endswith(tuple(self.VALID_EXTENSIONS)):\n                    raise ValueError(f\"Invalid file type. Expected: {', '.join(self.VALID_EXTENSIONS)}\")\n                \n                # Create a dictionary instead of a Document\n                doc_data = {\n                    \"text\": file_path,\n                    \"metadata\": {\n                        \"source\": file_path,\n                        \"type\": \"video\"\n                    }\n                }\n                \n                # Pass the dictionary to Data\n                file.data = Data(data=doc_data)\n                \n                self.log(f\"DEBUG: Created data: {doc_data}\")\n                processed_files.append(file)\n                \n            except Exception as e:\n                self.log(f\"Error processing video file: {str(e)}\", \"ERROR\")\n                raise\n        \n        return processed_files\n\n    def load_files(self) -> list[Data]:\n        \"\"\"Load video files and return a list of Data objects\"\"\"\n        try:\n            self.log(\"DEBUG: Starting video file load\")\n            if not hasattr(self, 'file_path') or not self.file_path:\n                self.log(\"DEBUG: No video file path provided\")\n                return []\n\n            self.log(f\"DEBUG: Loading video from path: {self.file_path}\")\n            \n            # Verify file exists\n            if not os.path.exists(self.file_path):\n                self.log(f\"DEBUG: Video file not found at path: {self.file_path}\")\n                return []\n            \n            # Verify file size\n            file_size = os.path.getsize(self.file_path)\n            self.log(f\"DEBUG: Video file size: {file_size} bytes\")\n            \n            # Create a proper Data object with the video path\n            video_data = {\n                \"text\": self.file_path,\n                \"metadata\": {\n                    \"source\": self.file_path,\n                    \"type\": \"video\",\n                    \"size\": file_size\n                }\n            }\n            \n            self.log(f\"DEBUG: Created video data: {video_data}\")\n            result = [Data(data=video_data)]\n            \n            # Log the result to verify it's a proper Data object\n            self.log(f\"DEBUG: Returning list with Data objects\")\n            return result\n            \n        except Exception as e:\n            self.log(f\"DEBUG: Error in video load_files: {str(e)}\", \"ERROR\")\n            import traceback\n            self.log(f\"DEBUG: Traceback: {traceback.format_exc()}\", \"ERROR\")\n            return []  # Return empty list on error\n"
              },
              "file_path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Video File",
                "dynamic": false,
                "fileTypes": [
                  "mp4",
                  "avi",
                  "mov",
                  "mkv",
                  "webm",
                  "flv",
                  "wmv",
                  "mpg",
                  "mpeg",
                  "m4v",
                  "3gp",
                  "3g2",
                  "m2v",
                  "mxf",
                  "dv",
                  "vob",
                  "ogv",
                  "rm",
                  "rmvb",
                  "amv",
                  "divx",
                  "m2ts",
                  "mts",
                  "ts",
                  "qt",
                  "yuv",
                  "y4m"
                ],
                "file_path": "07308b61-493e-4ef4-a65c-8a3572021b77/b136afaf-a343-43ec-bdb2-9eaf9d575f12.mp4",
                "info": "Upload a video file in any common video format supported by ffmpeg",
                "list": false,
                "list_add_label": "Add More",
                "name": "file_path",
                "placeholder": "",
                "required": true,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "VideoFile"
        },
        "dragging": false,
        "id": "VideoFile-SEa6V",
        "measured": {
          "height": 331,
          "width": 320
        },
        "position": {
          "x": 2012.8186554547576,
          "y": -268.70374865170027
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TwelveLabsPegasusIndexVideo-o0skq",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Index videos using Twelve Labs and add the video_id to metadata.",
            "display_name": "Twelve Labs Pegasus Index Video",
            "documentation": "",
            "edited": false,
            "field_order": [
              "videodata",
              "api_key",
              "model_name",
              "index_name",
              "index_id"
            ],
            "frozen": false,
            "icon": "TwelveLabs",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Indexed Data",
                "method": "index_videos",
                "name": "indexed_data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Twelve Labs API Key",
                "dynamic": false,
                "info": "Enter your Twelve Labs API Key.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DataInput, SecretStrInput, StrInput, DropdownInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom typing import Dict, Any, List, Tuple\nfrom twelvelabs import TwelveLabs\nimport time\nimport os\nfrom tenacity import retry, stop_after_attempt, wait_exponential\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass PegasusIndexVideo(Component):\n    \"\"\"Indexes videos using Twelve Labs Pegasus API and adds the video ID to metadata.\"\"\"\n\n    display_name = \"Twelve Labs Pegasus Index Video\"\n    description = \"Index videos using Twelve Labs and add the video_id to metadata.\"\n    icon = \"TwelveLabs\"\n    name = \"TwelveLabsPegasusIndexVideo\"\n\n    inputs = [\n        DataInput(\n            name=\"videodata\", \n            display_name=\"Video Data\", \n            info=\"Video Data objects (from VideoFile or SplitVideo)\",\n            is_list=True,\n            required=True\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Twelve Labs API Key\",\n            info=\"Enter your Twelve Labs API Key.\",\n            required=True\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"Pegasus model to use for indexing\",\n            options=[\"pegasus1.2\"],\n            value=\"pegasus1.2\",\n            advanced=False,\n        ),\n        StrInput(\n            name=\"index_name\",\n            display_name=\"Index Name\",\n            info=\"Name of the index to use. If the index doesn't exist, it will be created.\",\n            required=False\n        ),\n        StrInput(\n            name=\"index_id\",\n            display_name=\"Index ID\",\n            info=\"ID of an existing index to use. If provided, index_name will be ignored.\",\n            required=False\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Indexed Data\",\n            name=\"indexed_data\",\n            method=\"index_videos\",\n            output_types=[\"Data\"],\n            is_list=True\n        ),\n    ]\n\n    def _get_or_create_index(self, client: TwelveLabs) -> Tuple[str, str]:\n        \"\"\"Get existing index or create new one. Returns (index_id, index_name)\"\"\"\n        \n        # First check if index_id is provided and valid\n        if hasattr(self, 'index_id') and self.index_id:\n            try:\n                index = client.index.retrieve(id=self.index_id)\n                return self.index_id, index.name\n            except Exception as e:\n                if not hasattr(self, 'index_name') or not self.index_name:\n                    raise ValueError(\"Invalid index ID provided and no index name specified for fallback.\")\n\n        # If index_name is provided, try to find it\n        if hasattr(self, 'index_name') and self.index_name:\n            try:\n                # List all indexes and find by name\n                indexes = client.index.list()\n                for idx in indexes:\n                    if idx.name == self.index_name:\n                        return idx.id, idx.name\n                \n                # If we get here, index wasn't found - create it\n                index = client.index.create(\n                    name=self.index_name,\n                    models=[\n                        {\n                            \"name\": self.model_name if hasattr(self, 'model_name') else \"pegasus1.2\",\n                            \"options\": [\"visual\", \"audio\"]\n                        }\n                    ]\n                )\n                return index.id, index.name\n            except Exception as e:\n                raise\n\n        # If we get here, neither index_id nor index_name was provided\n        raise ValueError(\"Either index_name or index_id must be provided\")\n\n    def on_task_update(self, task, video_path):\n        \"\"\"Callback for task status updates\"\"\"\n        status_msg = f\"Indexing {os.path.basename(video_path)}... Status: {task.status}\"\n        self.status = status_msg\n\n    @retry(\n        stop=stop_after_attempt(5),\n        wait=wait_exponential(multiplier=1, min=5, max=60),\n        reraise=True\n    )\n    def _check_task_status(\n        self, \n        client: TwelveLabs, \n        task_id: str, \n        video_path: str,\n    ) -> Dict[str, Any]:\n        \"\"\"Check task status once\"\"\"\n        task = client.task.retrieve(id=task_id)\n        self.on_task_update(task, video_path)\n        return task\n\n    def _wait_for_task_completion(\n        self, \n        client: TwelveLabs, \n        task_id: str, \n        video_path: str,\n        max_retries: int = 120,\n        sleep_time: int = 10\n    ) -> Dict[str, Any]:\n        \"\"\"Wait for task completion with timeout and improved error handling\"\"\"\n        retries = 0\n        consecutive_errors = 0\n        max_consecutive_errors = 5\n        \n        while retries < max_retries:\n            try:\n                self.status = f\"Checking task status for {os.path.basename(video_path)} (attempt {retries + 1})\"\n                task = self._check_task_status(client, task_id, video_path)\n\n                if task.status == \"ready\":\n                    self.status = f\"Indexing for {os.path.basename(video_path)} completed successfully!\"\n                    return task\n                elif task.status == \"failed\":\n                    error_msg = f\"Task failed for {os.path.basename(video_path)}: {getattr(task, 'error', 'Unknown error')}\"\n                    self.status = error_msg\n                    raise Exception(error_msg)\n                elif task.status == \"error\":\n                    error_msg = f\"Task encountered an error for {os.path.basename(video_path)}: {getattr(task, 'error', 'Unknown error')}\"\n                    self.status = error_msg\n                    raise Exception(error_msg)\n                \n                time.sleep(sleep_time)\n                retries += 1\n                elapsed_time = retries * sleep_time\n                self.status = f\"Indexing {os.path.basename(video_path)}... {elapsed_time}s elapsed\"\n                \n            except Exception as e:\n                consecutive_errors += 1\n                error_msg = f\"Error checking task status for {os.path.basename(video_path)}: {str(e)}\"\n                self.status = error_msg\n                \n                if consecutive_errors >= max_consecutive_errors:\n                    raise Exception(f\"Too many consecutive errors checking task status for {os.path.basename(video_path)}: {error_msg}\")\n                \n                time.sleep(sleep_time * (2 ** consecutive_errors))\n                continue\n        \n        timeout_msg = f\"Timeout waiting for indexing of {os.path.basename(video_path)} after {max_retries * sleep_time} seconds\"\n        self.status = timeout_msg\n        raise TimeoutError(timeout_msg)\n\n    def _upload_video(self, client: TwelveLabs, video_path: str, index_id: str) -> str:\n        \"\"\"Upload a single video and return its task ID\"\"\"\n        with open(video_path, 'rb') as video_file:\n            self.status = f\"Uploading {os.path.basename(video_path)} to index {index_id}...\"\n            task = client.task.create(\n                index_id=index_id,\n                file=video_file\n            )\n            task_id = task.id\n            self.status = f\"Upload complete for {os.path.basename(video_path)}. Task ID: {task_id}\"\n            return task_id\n\n    def index_videos(self) -> List[Data]:\n        \"\"\"Indexes each video and adds the video_id to its metadata.\"\"\"\n        if not self.videodata:\n            self.status = \"No video data provided.\"\n            return []\n        \n        if not self.api_key:\n            raise ValueError(\"Twelve Labs API Key is required.\")\n\n        if not (hasattr(self, 'index_name') and self.index_name) and not (hasattr(self, 'index_id') and self.index_id):\n            raise ValueError(\"Either index_name or index_id must be provided\")\n\n        client = TwelveLabs(api_key=self.api_key)\n        indexed_data_list = []\n        \n        # Get or create the index\n        try:\n            index_id, index_name = self._get_or_create_index(client)\n            self.status = f\"Using index: {index_name} (ID: {index_id})\"\n        except Exception as e:\n            self.status = f\"Failed to get/create Twelve Labs index: {str(e)}\"\n            raise\n\n        # First, validate all videos and create a list of valid ones\n        valid_videos: List[Tuple[Data, str]] = []\n        for video_data_item in self.videodata:\n            if not isinstance(video_data_item, Data):\n                self.status = f\"Skipping invalid data item: {video_data_item}\"\n                continue\n\n            video_info = video_data_item.data\n            if not isinstance(video_info, dict):\n                self.status = f\"Skipping item with invalid data structure: {video_info}\"\n                continue\n\n            video_path = video_info.get('text')\n            if not video_path or not isinstance(video_path, str):\n                self.status = f\"Skipping item with missing or invalid video path: {video_info}\"\n                continue\n\n            if not os.path.exists(video_path):\n                self.status = f\"Video file not found, skipping: {video_path}\"\n                continue\n            \n            valid_videos.append((video_data_item, video_path))\n\n        if not valid_videos:\n            self.status = \"No valid videos to process.\"\n            return []\n\n        # Upload all videos first and collect their task IDs\n        upload_tasks: List[Tuple[Data, str, str]] = []  # (data_item, video_path, task_id)\n        for data_item, video_path in valid_videos:\n            try:\n                task_id = self._upload_video(client, video_path, index_id)\n                upload_tasks.append((data_item, video_path, task_id))\n            except Exception as e:\n                self.status = f\"Failed to upload {video_path}: {str(e)}\"\n                continue\n\n        # Now check all tasks in parallel using a thread pool\n        with ThreadPoolExecutor(max_workers=min(10, len(upload_tasks))) as executor:\n            futures = []\n            for data_item, video_path, task_id in upload_tasks:\n                future = executor.submit(\n                    self._wait_for_task_completion,\n                    client,\n                    task_id,\n                    video_path\n                )\n                futures.append((data_item, video_path, future))\n\n            # Process results as they complete\n            for data_item, video_path, future in futures:\n                try:\n                    completed_task = future.result()\n                    if completed_task.status == \"ready\":\n                        video_id = completed_task.video_id\n                        self.status = f\"Video {os.path.basename(video_path)} indexed successfully. Video ID: {video_id}\"\n                        \n                        # Add video_id to the metadata\n                        video_info = data_item.data\n                        if 'metadata' not in video_info:\n                            video_info['metadata'] = {}\n                        elif not isinstance(video_info['metadata'], dict):\n                            self.status = f\"Warning: Overwriting non-dict metadata for {video_path}\"\n                            video_info['metadata'] = {}\n\n                        video_info['metadata'].update({\n                            'video_id': video_id,\n                            'index_id': index_id,\n                            'index_name': index_name\n                        })\n                        \n                        updated_data_item = Data(data=video_info)\n                        indexed_data_list.append(updated_data_item)\n                except Exception as e:\n                    self.status = f\"Failed to process {video_path}: {str(e)}\"\n\n        if not indexed_data_list:\n            self.status = \"No videos were successfully indexed.\"\n        else:\n            self.status = f\"Finished indexing {len(indexed_data_list)}/{len(self.videodata)} videos.\"\n        \n        return indexed_data_list\n"
              },
              "index_id": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index ID",
                "dynamic": false,
                "info": "ID of an existing index to use. If provided, index_name will be ignored.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "index_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Index Name",
                "dynamic": false,
                "info": "Name of the index to use. If the index doesn't exist, it will be created.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "index_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "Pegasus model to use for indexing",
                "name": "model_name",
                "options": [
                  "pegasus1.2"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "pegasus1.2"
              },
              "videodata": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Video Data",
                "dynamic": false,
                "info": "Video Data objects (from VideoFile or SplitVideo)",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "videodata",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TwelveLabsPegasusIndexVideo"
        },
        "dragging": false,
        "id": "TwelveLabsPegasusIndexVideo-o0skq",
        "measured": {
          "height": 539,
          "width": 320
        },
        "position": {
          "x": 2917.5411625382735,
          "y": -123.02082723081271
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 383.1965863408499,
      "y": 271.1157728296557,
      "zoom": 0.6905145225500043
    }
  },
  "description": "",
  "endpoint_name": null,
  "id": "6911bac8-b113-4779-958c-9a2f1c088275",
  "is_component": false,
  "last_tested_version": "1.3.4",
  "name": "Twelve Labs Langflow RAG Flow",
  "tags": []
}